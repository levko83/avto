[Thu Jan  9 18:13:46.632 2014] [20694] accepting connections
[Fri Jan 10 00:00:05.294 2014] [20694] rotating indices (seamless=1)
[Fri Jan 10 00:00:05.329 2014] [20694] rotating index 'shinsIndex': success
[Fri Jan 10 00:00:05.339 2014] [20694] rotating finished
[Fri Jan 10 19:07:41.263 2014] [20694] caught SIGTERM, shutting down
[Fri Jan 10 19:07:41.327 2014] [20694] shutdown complete
[Fri Jan 10 19:08:00.298 2014] [ 3340] accepting connections
[Sat Jan 11 00:00:06.456 2014] [ 3340] rotating indices (seamless=1)
[Sat Jan 11 00:00:06.491 2014] [ 3340] rotating index 'shinsIndex': success
[Sat Jan 11 00:00:06.510 2014] [ 3340] rotating finished
[Sat Jan 11 13:59:29.024 2014] [ 3340] rotating indices (seamless=1)
[Sat Jan 11 13:59:29.050 2014] [ 3340] rotating index 'shinsIndex': success
[Sat Jan 11 13:59:29.058 2014] [ 3340] rotating finished
[Sat Jan 11 15:01:06.555 2014] [ 3340] rotating indices (seamless=1)
[Sat Jan 11 15:01:06.582 2014] [ 3340] rotating index 'shinsIndex': success
[Sat Jan 11 15:01:06.590 2014] [ 3340] rotating finished
[Sun Jan 12 00:00:10.887 2014] [ 3340] rotating indices (seamless=1)
[Sun Jan 12 00:00:10.981 2014] [ 3340] rotating index 'shinsIndex': success
[Sun Jan 12 00:00:10.990 2014] [ 3340] rotating finished
[Mon Jan 13 00:00:10.600 2014] [ 3340] rotating indices (seamless=1)
[Mon Jan 13 00:00:10.697 2014] [ 3340] rotating index 'shinsIndex': success
[Mon Jan 13 00:00:10.704 2014] [ 3340] rotating finished
[Tue Jan 14 00:00:10.301 2014] [ 3340] rotating indices (seamless=1)
[Tue Jan 14 00:00:10.398 2014] [ 3340] rotating index 'shinsIndex': success
[Tue Jan 14 00:00:10.406 2014] [ 3340] rotating finished
[Wed Jan 15 00:00:10.472 2014] [ 3340] rotating indices (seamless=1)
[Wed Jan 15 00:00:10.508 2014] [ 3340] rotating index 'shinsIndex': success
[Wed Jan 15 00:00:10.577 2014] [ 3340] rotating finished
[Wed Jan 15 17:29:24.072 2014] [ 3340] rotating indices (seamless=1)
[Wed Jan 15 17:29:24.181 2014] [ 3340] rotating index 'shinsIndex': success
[Wed Jan 15 17:29:24.185 2014] [ 3340] rotating finished
[Thu Jan 16 00:00:13.897 2014] [ 3340] rotating indices (seamless=1)
[Thu Jan 16 00:00:13.998 2014] [ 3340] rotating index 'shinsIndex': success
[Thu Jan 16 00:00:14.074 2014] [ 3340] rotating finished
[Fri Jan 17 00:00:12.401 2014] [ 3340] rotating indices (seamless=1)
[Fri Jan 17 00:00:12.500 2014] [ 3340] rotating index 'shinsIndex': success
[Fri Jan 17 00:00:12.578 2014] [ 3340] rotating finished
[Sat Jan 18 00:00:12.091 2014] [ 3340] rotating indices (seamless=1)
[Sat Jan 18 00:00:12.189 2014] [ 3340] rotating index 'shinsIndex': success
[Sat Jan 18 00:00:12.200 2014] [ 3340] rotating finished
[Tue Jan 21 16:32:13.231 2014] [ 3340] caught SIGTERM, shutting down
[Tue Jan 21 16:32:13.236 2014] [ 3340] shutdown complete
[Tue Jan 21 16:32:23.882 2014] [ 9439] accepting connections
[Tue Jan 21 16:32:49.172 2014] [ 9439] rotating indices (seamless=1)
[Tue Jan 21 16:32:49.271 2014] [ 9439] rotating index 'shinsIndex': success
[Tue Jan 21 16:32:49.280 2014] [ 9439] rotating finished
[Tue Jan 21 16:45:39.689 2014] [ 9439] rotating indices (seamless=1)
[Tue Jan 21 16:45:39.779 2014] [ 9439] rotating index 'shinsIndex': success
[Tue Jan 21 16:45:39.788 2014] [ 9439] rotating finished
[Tue Jan 21 16:54:51.047 2014] [ 9439] caught SIGTERM, shutting down
[Tue Jan 21 16:54:51.050 2014] [ 9439] shutdown complete
[Tue Jan 21 16:54:54.853 2014] [ 9814] accepting connections
[Tue Jan 21 16:58:42.503 2014] [ 9814] rotating indices (seamless=1)
[Tue Jan 21 16:58:42.589 2014] [ 9814] WARNING: rotating index 'shinsIndex': cur to old rename failed: rename /var/www/ponzps26/data/www/new.extraload.com.ua/protected/runtime/sphinxsearch/index/shins.spa to /var/www/ponzps26/data/www/new.extraload.com.ua/protected/runtime/sphinxsearch/index/shins.old.spa failed: No such file or directory
[Tue Jan 21 16:58:42.591 2014] [ 9814] rotating finished
[Tue Jan 21 17:05:44.369 2014] [ 9814] caught SIGTERM, shutting down
[Tue Jan 21 17:05:44.382 2014] [ 9814] shutdown complete
[Tue Jan 21 17:05:49.943 2014] [10017] accepting connections
[Tue Jan 21 17:07:30.237 2014] [10017] caught SIGTERM, shutting down
[Tue Jan 21 17:07:30.240 2014] [10017] shutdown complete
[Tue Jan 21 17:07:35.488 2014] [10044] accepting connections
[Tue Jan 21 17:35:15.785 2014] [10044] rotating indices (seamless=1)
[Tue Jan 21 17:35:15.875 2014] [10044] rotating index 'shinsIndex': success
[Tue Jan 21 17:35:15.885 2014] [10044] rotating finished
[Wed Jan 22 00:00:13.488 2014] [10044] rotating indices (seamless=1)
[Wed Jan 22 00:00:13.588 2014] [10044] rotating index 'shinsIndex': success
[Wed Jan 22 00:00:13.600 2014] [10044] rotating finished
[Thu Jan 23 00:00:13.690 2014] [10044] rotating indices (seamless=1)
[Thu Jan 23 00:00:13.787 2014] [10044] rotating index 'shinsIndex': success
[Thu Jan 23 00:00:13.801 2014] [10044] rotating finished
[Thu Jan 23 11:23:36.656 2014] [10044] caught SIGTERM, shutting down
[Thu Jan 23 11:23:36.667 2014] [10044] shutdown complete
[Thu Jan 23 11:30:35.004 2014] [ 2575] accepting connections
[Thu Jan 23 11:31:09.010 2014] [ 2575] caught SIGTERM, shutting down
[Thu Jan 23 11:31:09.010 2014] [ 2575] shutdown complete
[Thu Jan 23 11:31:40.922 2014] [ 2592] accepting connections
[Thu Jan 23 11:31:46.240 2014] [ 2592] rotating indices (seamless=1)
[Thu Jan 23 11:31:46.242 2014] [ 2592] rotating index 'shinsIndex': success
[Thu Jan 23 11:31:46.242 2014] [ 2592] rotating finished
[Thu Jan 23 11:31:54.603 2014] [ 2592] rotating indices (seamless=1)
[Thu Jan 23 11:31:54.606 2014] [ 2592] rotating index 'shinsIndex': success
[Thu Jan 23 11:31:54.606 2014] [ 2592] rotating finished
[Thu Jan 23 11:32:38.839 2014] [ 2592] rotating indices (seamless=1)
[Thu Jan 23 11:32:38.842 2014] [ 2592] rotating index 'shinsIndex': success
[Thu Jan 23 11:32:38.842 2014] [ 2592] rotating finished
[Thu Jan 23 11:33:25.374 2014] [ 2592] rotating indices (seamless=1)
[Thu Jan 23 11:33:25.378 2014] [ 2592] rotating index 'shinsIndex': success
[Thu Jan 23 11:33:25.378 2014] [ 2592] rotating finished
[Thu Jan 23 11:34:06.389 2014] [ 2592] caught SIGTERM, shutting down
[Thu Jan 23 11:34:06.389 2014] [ 2592] shutdown complete
[Thu Jan 23 11:36:10.305 2014] [ 2681] accepting connections
[Thu Jan 23 11:37:22.646 2014] [ 2681] rotating indices (seamless=1)
[Thu Jan 23 11:37:22.649 2014] [ 2681] rotating index 'shinsIndex': success
[Thu Jan 23 11:37:22.649 2014] [ 2681] rotating finished
[Thu Jan 23 11:37:49.780 2014] [ 2681] caught SIGTERM, shutting down
[Thu Jan 23 11:37:49.780 2014] [ 2681] shutdown complete
[Thu Jan 23 11:43:12.125 2014] [ 2796] accepting connections
[Thu Jan 23 11:43:28.803 2014] [ 2796] rotating indices (seamless=1)
[Thu Jan 23 11:43:28.806 2014] [ 2796] rotating index 'shinsIndex': success
[Thu Jan 23 11:43:28.806 2014] [ 2796] rotating finished
[Thu Jan 23 11:43:38.854 2014] [ 2796] rotating indices (seamless=1)
[Thu Jan 23 11:43:38.857 2014] [ 2796] rotating index 'shinsIndex': success
[Thu Jan 23 11:43:38.857 2014] [ 2796] rotating finished
[Thu Jan 23 11:45:08.522 2014] [ 2796] rotating indices (seamless=1)
[Thu Jan 23 11:45:08.525 2014] [ 2796] rotating index 'shinsIndex': success
[Thu Jan 23 11:45:08.525 2014] [ 2796] rotating finished
[Thu Jan 23 11:45:20.817 2014] [ 2796] rotating indices (seamless=1)
[Thu Jan 23 11:45:20.821 2014] [ 2796] rotating index 'shinsIndex': success
[Thu Jan 23 11:45:20.821 2014] [ 2796] rotating finished
[Thu Jan 23 11:47:59.064 2014] [ 2796] caught SIGTERM, shutting down
[Thu Jan 23 11:47:59.064 2014] [ 2796] shutdown complete
[Thu Jan 23 11:55:14.273 2014] [ 2961] accepting connections
[Thu Jan 23 11:55:27.747 2014] [ 2961] rotating indices (seamless=1)
[Thu Jan 23 11:55:27.749 2014] [ 2961] rotating index 'shinsIndex': success
[Thu Jan 23 11:55:27.749 2014] [ 2961] rotating finished
[Thu Jan 23 11:55:30.565 2014] [ 2961] rotating indices (seamless=1)
[Thu Jan 23 11:55:30.568 2014] [ 2961] rotating index 'shinsIndex': success
[Thu Jan 23 11:55:30.568 2014] [ 2961] rotating finished
[Thu Jan 23 11:55:33.687 2014] [ 2961] rotating indices (seamless=1)
[Thu Jan 23 11:55:33.690 2014] [ 2961] rotating index 'shinsIndex': success
[Thu Jan 23 11:55:33.690 2014] [ 2961] rotating finished
[Thu Jan 23 11:56:09.514 2014] [ 2961] caught SIGTERM, shutting down
[Thu Jan 23 11:56:09.514 2014] [ 2961] shutdown complete
[Thu Jan 23 12:15:54.765 2014] [ 3185] accepting connections
[Thu Jan 23 12:21:53.490 2014] [ 3185] rotating indices (seamless=1)
[Thu Jan 23 12:21:53.575 2014] [ 3185] rotating index 'shinsIndex': success
[Thu Jan 23 12:21:53.575 2014] [ 3185] rotating finished
[Thu Jan 23 14:54:36.514 2014] [ 3185] caught SIGTERM, shutting down
[Thu Jan 23 14:54:36.602 2014] [ 3185] shutdown complete
[Thu Jan 23 14:55:14.779 2014] [ 3231] accepting connections
[Thu Jan 23 15:01:36.872 2014] [ 3231] caught SIGTERM, shutting down
[Thu Jan 23 15:01:36.976 2014] [ 3231] shutdown complete
[Thu Jan 23 15:02:14.191 2014] [ 3269] accepting connections
[Thu Jan 23 16:22:34.206 2014] [ 3269] caught SIGTERM, shutting down
[Thu Jan 23 16:22:34.209 2014] [ 3269] shutdown complete
[Thu Jan 23 18:21:00.527 2014] [ 5440] accepting connections
[Fri Jan 24 00:00:13.399 2014] [ 5440] rotating indices (seamless=1)
[Fri Jan 24 00:00:13.498 2014] [ 5440] rotating index 'shinsIndex': success
[Fri Jan 24 00:00:13.507 2014] [ 5440] rotating finished
[Sat Jan 25 00:00:12.896 2014] [ 5440] rotating indices (seamless=1)
[Sat Jan 25 00:00:13.001 2014] [ 5440] rotating index 'shinsIndex': success
[Sat Jan 25 00:00:13.073 2014] [ 5440] rotating finished
[Sun Jan 26 00:00:15.791 2014] [ 5440] rotating indices (seamless=1)
[Sun Jan 26 00:00:15.890 2014] [ 5440] rotating index 'shinsIndex': success
[Sun Jan 26 00:00:15.895 2014] [ 5440] rotating finished
[Mon Jan 27 00:00:12.700 2014] [ 5440] rotating indices (seamless=1)
[Mon Jan 27 00:00:12.801 2014] [ 5440] rotating index 'shinsIndex': success
[Mon Jan 27 00:00:12.879 2014] [ 5440] rotating finished
[Mon Jan 27 15:50:51.072 2014] [ 5440] rotating indices (seamless=1)
[Mon Jan 27 15:50:51.101 2014] [ 5440] rotating index 'shinsIndex': success
[Mon Jan 27 15:50:51.174 2014] [ 5440] rotating finished
[Mon Jan 27 15:52:30.879 2014] [ 5440] rotating indices (seamless=1)
[Mon Jan 27 15:52:30.974 2014] [ 5440] rotating index 'disksIndex': success
[Mon Jan 27 15:52:30.974 2014] [ 5440] rotating finished
[Tue Jan 28 00:00:28.298 2014] [ 5440] rotating indices (seamless=1)
[Tue Jan 28 00:00:28.407 2014] [ 5440] rotating index 'disksIndex': success
[Tue Jan 28 00:00:28.598 2014] [ 5440] rotating index 'shinsIndex': success
[Tue Jan 28 00:00:28.609 2014] [ 5440] rotating finished
[Tue Jan 28 10:29:12.895 2014] [ 5440] rotating indices (seamless=1)
[Tue Jan 28 10:29:12.982 2014] [ 5440] rotating index 'disksIndex': success
[Tue Jan 28 10:29:13.072 2014] [ 5440] rotating finished
[Wed Jan 29 00:00:36.000 2014] [ 5440] rotating indices (seamless=1)
[Wed Jan 29 00:00:36.173 2014] [ 5440] rotating index 'disksIndex': success
[Wed Jan 29 00:00:36.290 2014] [ 5440] rotating index 'shinsIndex': success
[Wed Jan 29 00:00:36.300 2014] [ 5440] rotating finished
[Thu Jan 30 00:00:28.572 2014] [ 5440] rotating indices (seamless=1)
[Thu Jan 30 00:00:28.700 2014] [ 5440] rotating index 'disksIndex': success
[Thu Jan 30 00:00:28.896 2014] [ 5440] rotating index 'shinsIndex': success
[Thu Jan 30 00:00:28.906 2014] [ 5440] rotating finished
[Fri Jan 31 00:00:11.941 2014] [ 5440] rotating indices (seamless=1)
[Fri Jan 31 00:00:11.989 2014] [ 5440] rotating index 'disksIndex': success
[Fri Jan 31 00:00:12.043 2014] [ 5440] rotating index 'shinsIndex': success
[Fri Jan 31 00:00:12.054 2014] [ 5440] rotating finished
[Sat Feb  1 00:00:11.398 2014] [ 5440] rotating indices (seamless=1)
[Sat Feb  1 00:00:11.446 2014] [ 5440] rotating index 'disksIndex': success
[Sat Feb  1 00:00:11.495 2014] [ 5440] rotating index 'shinsIndex': success
[Sat Feb  1 00:00:11.506 2014] [ 5440] rotating finished
[Sun Feb  2 00:00:11.981 2014] [ 5440] rotating indices (seamless=1)
[Sun Feb  2 00:00:12.033 2014] [ 5440] rotating index 'disksIndex': success
[Sun Feb  2 00:00:12.083 2014] [ 5440] rotating index 'shinsIndex': success
[Sun Feb  2 00:00:12.088 2014] [ 5440] rotating finished
[Mon Feb  3 00:00:11.874 2014] [ 5440] rotating indices (seamless=1)
[Mon Feb  3 00:00:11.925 2014] [ 5440] rotating index 'disksIndex': success
[Mon Feb  3 00:00:11.981 2014] [ 5440] rotating index 'shinsIndex': success
[Mon Feb  3 00:00:11.992 2014] [ 5440] rotating finished
[Tue Feb  4 00:00:12.248 2014] [ 5440] rotating indices (seamless=1)
[Tue Feb  4 00:00:12.293 2014] [ 5440] rotating index 'disksIndex': success
[Tue Feb  4 00:00:12.349 2014] [ 5440] rotating index 'shinsIndex': success
[Tue Feb  4 00:00:12.359 2014] [ 5440] rotating finished
[Wed Feb  5 00:00:12.079 2014] [ 5440] rotating indices (seamless=1)
[Wed Feb  5 00:00:12.127 2014] [ 5440] rotating index 'disksIndex': success
[Wed Feb  5 00:00:12.183 2014] [ 5440] rotating index 'shinsIndex': success
[Wed Feb  5 00:00:12.193 2014] [ 5440] rotating finished
[Wed Feb  5 16:10:31.883 2014] [ 5440] rotating indices (seamless=1)
[Wed Feb  5 16:10:31.918 2014] [ 5440] rotating index 'disksIndex': success
[Wed Feb  5 16:10:31.929 2014] [ 5440] rotating finished
[Thu Feb  6 00:00:12.621 2014] [ 5440] rotating indices (seamless=1)
[Thu Feb  6 00:00:12.665 2014] [ 5440] rotating index 'disksIndex': success
[Thu Feb  6 00:00:12.719 2014] [ 5440] rotating index 'shinsIndex': success
[Thu Feb  6 00:00:12.729 2014] [ 5440] rotating finished
[Fri Feb  7 00:00:13.193 2014] [ 5440] rotating indices (seamless=1)
[Fri Feb  7 00:00:13.237 2014] [ 5440] rotating index 'disksIndex': success
[Fri Feb  7 00:00:13.287 2014] [ 5440] rotating index 'shinsIndex': success
[Fri Feb  7 00:00:13.291 2014] [ 5440] rotating finished
[Sat Feb  8 00:00:13.511 2014] [ 5440] rotating indices (seamless=1)
[Sat Feb  8 00:00:13.560 2014] [ 5440] rotating index 'disksIndex': success
[Sat Feb  8 00:00:13.610 2014] [ 5440] rotating index 'shinsIndex': success
[Sat Feb  8 00:00:13.617 2014] [ 5440] rotating finished
[Sun Feb  9 00:00:16.267 2014] [ 5440] rotating indices (seamless=1)
[Sun Feb  9 00:00:16.344 2014] [ 5440] rotating index 'disksIndex': success
[Sun Feb  9 00:00:16.439 2014] [ 5440] rotating index 'shinsIndex': success
[Sun Feb  9 00:00:16.457 2014] [ 5440] rotating finished
[Mon Feb 10 00:00:14.516 2014] [ 5440] rotating indices (seamless=1)
[Mon Feb 10 00:00:14.567 2014] [ 5440] rotating index 'disksIndex': success
[Mon Feb 10 00:00:14.633 2014] [ 5440] rotating index 'shinsIndex': success
[Mon Feb 10 00:00:14.644 2014] [ 5440] rotating finished
[Tue Feb 11 00:00:12.325 2014] [ 5440] rotating indices (seamless=1)
[Tue Feb 11 00:00:12.414 2014] [ 5440] rotating index 'disksIndex': success
[Tue Feb 11 00:00:12.458 2014] [ 5440] rotating index 'shinsIndex': success
[Tue Feb 11 00:00:12.464 2014] [ 5440] rotating finished
[Wed Feb 12 00:00:14.401 2014] [ 5440] rotating indices (seamless=1)
[Wed Feb 12 00:00:14.451 2014] [ 5440] rotating index 'disksIndex': success
[Wed Feb 12 00:00:14.503 2014] [ 5440] rotating index 'shinsIndex': success
[Wed Feb 12 00:00:14.508 2014] [ 5440] rotating finished
[Thu Feb 13 00:00:16.220 2014] [ 5440] rotating indices (seamless=1)
[Thu Feb 13 00:00:16.267 2014] [ 5440] rotating index 'disksIndex': success
[Thu Feb 13 00:00:16.334 2014] [ 5440] rotating index 'shinsIndex': success
[Thu Feb 13 00:00:16.345 2014] [ 5440] rotating finished
[Fri Feb 14 00:00:48.836 2014] [ 5440] rotating indices (seamless=1)
[Fri Feb 14 00:00:48.964 2014] [ 5440] rotating index 'disksIndex': success
[Fri Feb 14 00:00:49.110 2014] [ 5440] rotating index 'shinsIndex': success
[Fri Feb 14 00:00:49.121 2014] [ 5440] rotating finished
[Sat Feb 15 00:00:27.149 2014] [ 5440] rotating indices (seamless=1)
[Sat Feb 15 00:00:27.228 2014] [ 5440] rotating index 'disksIndex': success
[Sat Feb 15 00:00:27.296 2014] [ 5440] rotating index 'shinsIndex': success
[Sat Feb 15 00:00:27.302 2014] [ 5440] rotating finished
[Sun Feb 16 00:00:13.070 2014] [ 5440] rotating indices (seamless=1)
[Sun Feb 16 00:00:13.156 2014] [ 5440] rotating index 'disksIndex': success
[Sun Feb 16 00:00:13.192 2014] [ 5440] rotating index 'shinsIndex': success
[Sun Feb 16 00:00:13.205 2014] [ 5440] rotating finished
[Mon Feb 17 00:00:17.347 2014] [ 5440] rotating indices (seamless=1)
[Mon Feb 17 00:00:17.393 2014] [ 5440] rotating index 'disksIndex': success
[Mon Feb 17 00:00:17.449 2014] [ 5440] rotating index 'shinsIndex': success
[Mon Feb 17 00:00:17.459 2014] [ 5440] rotating finished
[Tue Feb 18 00:00:16.886 2014] [ 5440] rotating indices (seamless=1)
[Tue Feb 18 00:00:16.960 2014] [ 5440] rotating index 'disksIndex': success
[Tue Feb 18 00:00:17.004 2014] [ 5440] rotating index 'shinsIndex': success
[Tue Feb 18 00:00:17.014 2014] [ 5440] rotating finished
[Wed Feb 19 00:00:15.199 2014] [ 5440] rotating indices (seamless=1)
[Wed Feb 19 00:00:15.281 2014] [ 5440] rotating index 'disksIndex': success
[Wed Feb 19 00:00:15.338 2014] [ 5440] rotating index 'shinsIndex': success
[Wed Feb 19 00:00:15.358 2014] [ 5440] rotating finished
[Thu Feb 20 00:00:16.519 2014] [ 5440] rotating indices (seamless=1)
[Thu Feb 20 00:00:16.565 2014] [ 5440] rotating index 'disksIndex': success
[Thu Feb 20 00:00:16.619 2014] [ 5440] rotating index 'shinsIndex': success
[Thu Feb 20 00:00:16.623 2014] [ 5440] rotating finished
[Fri Feb 21 00:00:16.563 2014] [ 5440] rotating indices (seamless=1)
[Fri Feb 21 00:00:16.618 2014] [ 5440] rotating index 'disksIndex': success
[Fri Feb 21 00:00:16.676 2014] [ 5440] rotating index 'shinsIndex': success
[Fri Feb 21 00:00:16.689 2014] [ 5440] rotating finished
[Sat Feb 22 00:00:18.629 2014] [ 5440] rotating indices (seamless=1)
[Sat Feb 22 00:00:18.676 2014] [ 5440] rotating index 'disksIndex': success
[Sat Feb 22 00:00:18.735 2014] [ 5440] rotating index 'shinsIndex': success
[Sat Feb 22 00:00:18.748 2014] [ 5440] rotating finished
[Sun Feb 23 00:00:16.436 2014] [ 5440] rotating indices (seamless=1)
[Sun Feb 23 00:00:16.486 2014] [ 5440] rotating index 'disksIndex': success
[Sun Feb 23 00:00:16.545 2014] [ 5440] rotating index 'shinsIndex': success
[Sun Feb 23 00:00:16.550 2014] [ 5440] rotating finished
[Mon Feb 24 00:00:16.747 2014] [ 5440] rotating indices (seamless=1)
[Mon Feb 24 00:00:16.804 2014] [ 5440] rotating index 'disksIndex': success
[Mon Feb 24 00:00:16.862 2014] [ 5440] rotating index 'shinsIndex': success
[Mon Feb 24 00:00:16.874 2014] [ 5440] rotating finished
[Tue Feb 25 00:00:12.609 2014] [ 5440] rotating indices (seamless=1)
[Tue Feb 25 00:00:12.657 2014] [ 5440] rotating index 'disksIndex': success
[Tue Feb 25 00:00:12.712 2014] [ 5440] rotating index 'shinsIndex': success
[Tue Feb 25 00:00:12.717 2014] [ 5440] rotating finished
[Wed Feb 26 00:00:11.848 2014] [ 5440] rotating indices (seamless=1)
[Wed Feb 26 00:00:11.894 2014] [ 5440] rotating index 'disksIndex': success
[Wed Feb 26 00:00:11.947 2014] [ 5440] rotating index 'shinsIndex': success
[Wed Feb 26 00:00:11.957 2014] [ 5440] rotating finished
[Thu Feb 27 00:00:14.018 2014] [ 5440] rotating indices (seamless=1)
[Thu Feb 27 00:00:14.069 2014] [ 5440] rotating index 'disksIndex': success
[Thu Feb 27 00:00:14.126 2014] [ 5440] rotating index 'shinsIndex': success
[Thu Feb 27 00:00:14.131 2014] [ 5440] rotating finished
[Fri Feb 28 00:00:12.582 2014] [ 5440] rotating indices (seamless=1)
[Fri Feb 28 00:00:12.632 2014] [ 5440] rotating index 'disksIndex': success
[Fri Feb 28 00:00:12.689 2014] [ 5440] rotating index 'shinsIndex': success
[Fri Feb 28 00:00:12.700 2014] [ 5440] rotating finished
[Sat Mar  1 00:00:13.734 2014] [ 5440] rotating indices (seamless=1)
[Sat Mar  1 00:00:13.822 2014] [ 5440] rotating index 'disksIndex': success
[Sat Mar  1 00:00:13.858 2014] [ 5440] rotating index 'shinsIndex': success
[Sat Mar  1 00:00:13.869 2014] [ 5440] rotating finished
[Sun Mar  2 00:00:12.124 2014] [ 5440] rotating indices (seamless=1)
[Sun Mar  2 00:00:12.174 2014] [ 5440] rotating index 'disksIndex': success
[Sun Mar  2 00:00:12.228 2014] [ 5440] rotating index 'shinsIndex': success
[Sun Mar  2 00:00:12.233 2014] [ 5440] rotating finished
[Mon Mar  3 00:00:13.279 2014] [ 5440] rotating indices (seamless=1)
[Mon Mar  3 00:00:13.326 2014] [ 5440] rotating index 'disksIndex': success
[Mon Mar  3 00:00:13.381 2014] [ 5440] rotating index 'shinsIndex': success
[Mon Mar  3 00:00:13.391 2014] [ 5440] rotating finished
[Tue Mar  4 00:00:12.879 2014] [ 5440] rotating indices (seamless=1)
[Tue Mar  4 00:00:12.976 2014] [ 5440] rotating index 'disksIndex': success
[Tue Mar  4 00:00:13.009 2014] [ 5440] rotating index 'shinsIndex': success
[Tue Mar  4 00:00:13.014 2014] [ 5440] rotating finished
[Wed Mar  5 00:00:12.806 2014] [ 5440] rotating indices (seamless=1)
[Wed Mar  5 00:00:12.881 2014] [ 5440] rotating index 'disksIndex': success
[Wed Mar  5 00:00:12.939 2014] [ 5440] rotating index 'shinsIndex': success
[Wed Mar  5 00:00:12.971 2014] [ 5440] rotating finished
[Thu Mar  6 00:00:13.042 2014] [ 5440] rotating indices (seamless=1)
[Thu Mar  6 00:00:13.127 2014] [ 5440] rotating index 'disksIndex': success
[Thu Mar  6 00:00:13.165 2014] [ 5440] rotating index 'shinsIndex': success
[Thu Mar  6 00:00:13.170 2014] [ 5440] rotating finished
[Fri Mar  7 00:00:14.106 2014] [ 5440] rotating indices (seamless=1)
[Fri Mar  7 00:00:14.154 2014] [ 5440] rotating index 'disksIndex': success
[Fri Mar  7 00:00:14.188 2014] [ 5440] rotating index 'shinsIndex': success
[Fri Mar  7 00:00:14.194 2014] [ 5440] rotating finished
[Sat Mar  8 00:00:13.078 2014] [ 5440] rotating indices (seamless=1)
[Sat Mar  8 00:00:13.156 2014] [ 5440] rotating index 'disksIndex': success
[Sat Mar  8 00:00:13.198 2014] [ 5440] rotating index 'shinsIndex': success
[Sat Mar  8 00:00:13.211 2014] [ 5440] rotating finished
[Sun Mar  9 00:00:13.726 2014] [ 5440] rotating indices (seamless=1)
[Sun Mar  9 00:00:13.773 2014] [ 5440] rotating index 'disksIndex': success
[Sun Mar  9 00:00:13.828 2014] [ 5440] rotating index 'shinsIndex': success
[Sun Mar  9 00:00:13.838 2014] [ 5440] rotating finished
[Mon Mar 10 00:00:17.465 2014] [ 5440] rotating indices (seamless=1)
[Mon Mar 10 00:00:17.516 2014] [ 5440] rotating index 'disksIndex': success
[Mon Mar 10 00:00:17.568 2014] [ 5440] rotating index 'shinsIndex': success
[Mon Mar 10 00:00:17.576 2014] [ 5440] rotating finished
[Tue Mar 11 00:00:13.136 2014] [ 5440] rotating indices (seamless=1)
[Tue Mar 11 00:00:13.186 2014] [ 5440] rotating index 'disksIndex': success
[Tue Mar 11 00:00:13.237 2014] [ 5440] rotating index 'shinsIndex': success
[Tue Mar 11 00:00:13.247 2014] [ 5440] rotating finished
[Wed Mar 12 00:00:13.894 2014] [ 5440] rotating indices (seamless=1)
[Wed Mar 12 00:00:13.949 2014] [ 5440] rotating index 'disksIndex': success
[Wed Mar 12 00:00:14.009 2014] [ 5440] rotating index 'shinsIndex': success
[Wed Mar 12 00:00:14.019 2014] [ 5440] rotating finished
[Thu Mar 13 00:00:13.944 2014] [ 5440] rotating indices (seamless=1)
[Thu Mar 13 00:00:14.001 2014] [ 5440] rotating index 'disksIndex': success
[Thu Mar 13 00:00:14.056 2014] [ 5440] rotating index 'shinsIndex': success
[Thu Mar 13 00:00:14.065 2014] [ 5440] rotating finished
[Fri Mar 14 00:00:16.373 2014] [ 5440] rotating indices (seamless=1)
[Fri Mar 14 00:00:16.458 2014] [ 5440] rotating index 'disksIndex': success
[Fri Mar 14 00:00:16.518 2014] [ 5440] rotating index 'shinsIndex': success
[Fri Mar 14 00:00:16.526 2014] [ 5440] rotating finished
[Fri Mar 14 16:52:29.214 2014] [ 5440] rotating indices (seamless=1)
[Fri Mar 14 16:52:29.257 2014] [ 5440] rotating index 'shinsIndex': success
[Fri Mar 14 16:52:29.268 2014] [ 5440] rotating finished
[Fri Mar 14 16:52:47.463 2014] [ 5440] rotating indices (seamless=1)
[Fri Mar 14 16:52:47.503 2014] [ 5440] rotating index 'disksIndex': success
[Fri Mar 14 16:52:47.514 2014] [ 5440] rotating finished
[Sat Mar 15 00:00:11.725 2014] [ 5440] rotating indices (seamless=1)
[Sat Mar 15 00:00:11.777 2014] [ 5440] rotating index 'disksIndex': success
[Sat Mar 15 00:00:11.828 2014] [ 5440] rotating index 'shinsIndex': success
[Sat Mar 15 00:00:11.834 2014] [ 5440] rotating finished
[Sun Mar 16 00:00:11.926 2014] [ 5440] rotating indices (seamless=1)
[Sun Mar 16 00:00:11.990 2014] [ 5440] rotating index 'disksIndex': success
[Sun Mar 16 00:00:12.041 2014] [ 5440] rotating index 'shinsIndex': success
[Sun Mar 16 00:00:12.052 2014] [ 5440] rotating finished
[Mon Mar 17 00:00:12.849 2014] [ 5440] rotating indices (seamless=1)
[Mon Mar 17 00:00:12.900 2014] [ 5440] rotating index 'disksIndex': success
[Mon Mar 17 00:00:12.938 2014] [ 5440] rotating index 'shinsIndex': success
[Mon Mar 17 00:00:12.944 2014] [ 5440] rotating finished
[Tue Mar 18 00:00:12.814 2014] [ 5440] rotating indices (seamless=1)
[Tue Mar 18 00:00:12.885 2014] [ 5440] rotating index 'disksIndex': success
[Tue Mar 18 00:00:12.931 2014] [ 5440] rotating index 'shinsIndex': success
[Tue Mar 18 00:00:12.938 2014] [ 5440] rotating finished
[Wed Mar 19 00:00:12.223 2014] [ 5440] rotating indices (seamless=1)
[Wed Mar 19 00:00:12.274 2014] [ 5440] rotating index 'disksIndex': success
[Wed Mar 19 00:00:12.332 2014] [ 5440] rotating index 'shinsIndex': success
[Wed Mar 19 00:00:12.342 2014] [ 5440] rotating finished
[Thu Mar 20 00:00:13.225 2014] [ 5440] rotating indices (seamless=1)
[Thu Mar 20 00:00:13.277 2014] [ 5440] rotating index 'disksIndex': success
[Thu Mar 20 00:00:13.334 2014] [ 5440] rotating index 'shinsIndex': success
[Thu Mar 20 00:00:13.345 2014] [ 5440] rotating finished
[Fri Mar 21 00:00:13.499 2014] [ 5440] rotating indices (seamless=1)
[Fri Mar 21 00:00:13.549 2014] [ 5440] rotating index 'disksIndex': success
[Fri Mar 21 00:00:13.599 2014] [ 5440] rotating index 'shinsIndex': success
[Fri Mar 21 00:00:13.603 2014] [ 5440] rotating finished
[Sat Mar 29 18:29:17.041 2014] [ 3624] accepting connections
[Sun Mar 30 00:00:20.680 2014] [ 3624] rotating indices (seamless=1)
[Sun Mar 30 00:00:22.052 2014] [ 3624] rotating index 'disksIndex': success
[Sun Mar 30 00:00:22.210 2014] [ 3624] rotating index 'shinsIndex': success
[Sun Mar 30 00:00:22.214 2014] [ 3624] rotating finished
[Mon Mar 31 00:00:17.334 2014] [ 3624] rotating indices (seamless=1)
[Mon Mar 31 00:00:18.111 2014] [ 3624] rotating index 'disksIndex': success
[Mon Mar 31 00:00:18.749 2014] [ 3624] rotating index 'shinsIndex': success
[Mon Mar 31 00:00:19.108 2014] [ 3624] rotating finished
[Tue Apr  1 00:00:16.384 2014] [ 3624] rotating indices (seamless=1)
[Tue Apr  1 00:00:17.283 2014] [ 3624] rotating index 'disksIndex': success
[Tue Apr  1 00:00:17.588 2014] [ 3624] rotating index 'shinsIndex': success
[Tue Apr  1 00:00:17.870 2014] [ 3624] rotating finished
[Wed Apr  2 00:00:24.984 2014] [ 3624] rotating indices (seamless=1)
[Wed Apr  2 00:00:26.762 2014] [ 3624] rotating index 'disksIndex': success
[Wed Apr  2 00:00:28.126 2014] [ 3624] rotating index 'shinsIndex': success
[Wed Apr  2 00:00:28.803 2014] [ 3624] rotating finished
[Thu Apr  3 00:00:18.070 2014] [ 3624] rotating indices (seamless=1)
[Thu Apr  3 00:00:19.206 2014] [ 3624] rotating index 'disksIndex': success
[Thu Apr  3 00:00:19.563 2014] [ 3624] rotating index 'shinsIndex': success
[Thu Apr  3 00:00:19.776 2014] [ 3624] rotating finished
[Fri Apr  4 00:00:27.688 2014] [ 3624] rotating indices (seamless=1)
[Fri Apr  4 00:00:28.462 2014] [ 3624] rotating index 'disksIndex': success
[Fri Apr  4 00:00:28.974 2014] [ 3624] rotating index 'shinsIndex': success
[Fri Apr  4 00:00:29.003 2014] [ 3624] rotating finished
[Fri Apr  4 12:15:25.145 2014] [ 3624] rotating indices (seamless=1)
[Fri Apr  4 12:15:25.894 2014] [ 3624] rotating index 'shinsIndex': success
[Fri Apr  4 12:15:25.997 2014] [ 3624] rotating finished
[Fri Apr  4 12:15:36.812 2014] [ 3624] rotating indices (seamless=1)
[Fri Apr  4 12:15:36.932 2014] [ 3624] rotating index 'disksIndex': success
[Fri Apr  4 12:15:37.043 2014] [ 3624] rotating finished
[Fri Apr  4 13:09:07.629 2014] [ 3624] rotating indices (seamless=1)
[Fri Apr  4 13:09:07.648 2014] [ 3624] rotating index 'shinsIndex': success
[Fri Apr  4 13:09:07.658 2014] [ 3624] rotating finished
[Fri Apr  4 13:11:30.831 2014] [ 3624] rotating indices (seamless=1)
[Fri Apr  4 13:11:30.849 2014] [ 3624] rotating index 'shinsIndex': success
[Fri Apr  4 13:11:30.855 2014] [ 3624] rotating finished
[Sat Apr  5 00:00:20.204 2014] [ 3624] rotating indices (seamless=1)
[Sat Apr  5 00:00:20.482 2014] [ 3624] rotating index 'disksIndex': success
[Sat Apr  5 00:00:20.571 2014] [ 3624] rotating index 'shinsIndex': success
[Sat Apr  5 00:00:20.573 2014] [ 3624] rotating finished
[Sat Apr  5 21:28:11.725 2014] [ 3624] rotating indices (seamless=1)
[Sat Apr  5 21:28:11.868 2014] [ 3624] rotating index 'disksIndex': success
[Sat Apr  5 21:28:11.934 2014] [ 3624] rotating finished
[Sat Apr  5 21:28:42.444 2014] [ 3624] rotating indices (seamless=1)
[Sat Apr  5 21:28:42.511 2014] [ 3624] rotating index 'shinsIndex': success
[Sat Apr  5 21:28:42.556 2014] [ 3624] rotating finished
[Sat Apr  5 21:28:53.248 2014] [ 3624] rotating indices (seamless=1)
[Sat Apr  5 21:28:53.297 2014] [ 3624] rotating index 'disksIndex': success
[Sat Apr  5 21:28:53.304 2014] [ 3624] rotating finished
[Sat Apr  5 21:28:58.876 2014] [ 3624] rotating indices (seamless=1)
[Sat Apr  5 21:28:58.927 2014] [ 3624] rotating index 'disksIndex': success
[Sat Apr  5 21:28:58.933 2014] [ 3624] rotating finished
[Sun Apr  6 00:00:20.135 2014] [ 3624] rotating indices (seamless=1)
[Sun Apr  6 00:00:20.245 2014] [ 3624] rotating index 'disksIndex': success
[Sun Apr  6 00:00:20.320 2014] [ 3624] rotating index 'shinsIndex': success
[Sun Apr  6 00:00:20.323 2014] [ 3624] rotating finished
[Mon Apr  7 00:00:23.521 2014] [ 3624] rotating indices (seamless=1)
[Mon Apr  7 00:00:23.833 2014] [ 3624] rotating index 'disksIndex': success
[Mon Apr  7 00:00:24.057 2014] [ 3624] rotating index 'shinsIndex': success
[Mon Apr  7 00:00:24.079 2014] [ 3624] rotating finished
[Tue Apr  8 00:00:12.742 2014] [ 3624] rotating indices (seamless=1)
[Tue Apr  8 00:00:13.441 2014] [ 3624] rotating index 'disksIndex': success
[Tue Apr  8 00:00:13.948 2014] [ 3624] rotating index 'shinsIndex': success
[Tue Apr  8 00:00:14.174 2014] [ 3624] rotating finished
[Wed Apr  9 00:00:44.987 2014] [ 3624] rotating indices (seamless=1)
[Wed Apr  9 00:00:46.900 2014] [ 3624] rotating index 'disksIndex': success
[Wed Apr  9 00:00:48.182 2014] [ 3624] rotating index 'shinsIndex': success
[Wed Apr  9 00:00:48.505 2014] [ 3624] rotating finished
[Thu Apr 10 00:00:17.577 2014] [ 3624] rotating indices (seamless=1)
[Thu Apr 10 00:00:18.560 2014] [ 3624] rotating index 'disksIndex': success
[Thu Apr 10 00:00:18.624 2014] [ 3624] rotating index 'shinsIndex': success
[Thu Apr 10 00:00:18.712 2014] [ 3624] rotating finished
[Fri Apr 11 00:00:20.622 2014] [ 3624] rotating indices (seamless=1)
[Fri Apr 11 00:00:23.565 2014] [ 3624] rotating index 'disksIndex': success
[Fri Apr 11 00:00:25.012 2014] [ 3624] rotating index 'shinsIndex': success
[Fri Apr 11 00:00:25.140 2014] [ 3624] rotating finished
[Sat Apr 12 00:00:16.150 2014] [ 3624] rotating indices (seamless=1)
[Sat Apr 12 00:00:17.111 2014] [ 3624] rotating index 'disksIndex': success
[Sat Apr 12 00:00:17.534 2014] [ 3624] rotating index 'shinsIndex': success
[Sat Apr 12 00:00:17.677 2014] [ 3624] rotating finished
[Sun Apr 13 00:00:14.922 2014] [ 3624] rotating indices (seamless=1)
[Sun Apr 13 00:00:15.419 2014] [ 3624] rotating index 'disksIndex': success
[Sun Apr 13 00:00:15.905 2014] [ 3624] rotating index 'shinsIndex': success
[Sun Apr 13 00:00:16.590 2014] [ 3624] rotating finished
[Mon Apr 14 00:00:12.612 2014] [ 3624] rotating indices (seamless=1)
[Mon Apr 14 00:00:13.066 2014] [ 3624] rotating index 'disksIndex': success
[Mon Apr 14 00:00:13.258 2014] [ 3624] rotating index 'shinsIndex': success
[Mon Apr 14 00:00:13.283 2014] [ 3624] rotating finished
[Tue Apr 15 00:00:26.976 2014] [ 3624] rotating indices (seamless=1)
[Tue Apr 15 00:00:27.696 2014] [ 3624] rotating index 'disksIndex': success
[Tue Apr 15 00:00:28.452 2014] [ 3624] rotating index 'shinsIndex': success
[Tue Apr 15 00:00:28.651 2014] [ 3624] rotating finished
[Tue Apr 15 13:37:26.049 2014] [ 3624] caught SIGTERM, shutting down
[Tue Apr 15 13:37:26.071 2014] [ 3624] shutdown complete
[Tue Apr 15 13:37:36.177 2014] [25143] accepting connections
[Tue Apr 15 13:38:26.176 2014] [25143] rotating indices (seamless=1)
[Tue Apr 15 13:38:26.870 2014] [25143] rotating index 'shinsIndex': success
[Tue Apr 15 13:38:27.266 2014] [25143] rotating finished
[Tue Apr 15 13:38:29.609 2014] [25143] rotating indices (seamless=1)
[Tue Apr 15 13:38:29.630 2014] [25143] rotating index 'shinsIndex': success
[Tue Apr 15 13:38:29.636 2014] [25143] rotating finished
[Tue Apr 15 13:52:16.323 2014] [25143] rotating indices (seamless=1)
[Tue Apr 15 13:52:16.887 2014] [25143] rotating index 'disksIndex': success
[Tue Apr 15 13:52:17.046 2014] [25143] rotating index 'shinsIndex': success
[Tue Apr 15 13:52:17.051 2014] [25143] rotating finished
[Tue Apr 15 13:55:32.391 2014] [25143] caught SIGTERM, shutting down
[Tue Apr 15 13:55:32.396 2014] [25143] shutdown complete
[Tue Apr 15 13:55:49.620 2014] [25447] accepting connections
[Tue Apr 15 13:58:07.591 2014] [25447] caught SIGTERM, shutting down
[Tue Apr 15 13:58:07.596 2014] [25447] shutdown complete
[Tue Apr 15 13:58:10.329 2014] [25475] accepting connections
[Tue Apr 15 14:27:26.659 2014] [25475] caught SIGTERM, shutting down
[Tue Apr 15 14:27:26.664 2014] [25475] shutdown complete
[Tue Apr 15 14:27:33.416 2014] [32117] accepting connections
[Wed Apr 16 00:00:27.477 2014] [32117] rotating indices (seamless=1)
[Wed Apr 16 00:00:28.422 2014] [32117] rotating index 'disksIndex': success
[Wed Apr 16 00:00:28.872 2014] [32117] rotating index 'shinsIndex': success
[Wed Apr 16 00:00:29.035 2014] [32117] rotating finished
[Wed Apr 16 09:19:29.493 2014] [18567] listening on all interfaces, port=9306
[Wed Apr 16 09:19:29.494 2014] [18567] bind() failed on 0.0.0.0, retrying...
[Wed Apr 16 09:19:32.497 2014] [18567] bind() failed on 0.0.0.0, retrying...
[Wed Apr 16 09:19:35.498 2014] [18567] bind() failed on 0.0.0.0, retrying...
[Wed Apr 16 09:19:39.232 2014] [18567] last message repeated 1 times
[Wed Apr 16 09:19:39.232 2014] [18567] bind() failed on 0.0.0.0, retrying...
[Wed Apr 16 09:19:42.234 2014] [18567] bind() failed on 0.0.0.0, retrying...
[Wed Apr 16 09:19:45.237 2014] [18567] bind() failed on 0.0.0.0, retrying...
[Wed Apr 16 09:19:48.240 2014] [18567] bind() failed on 0.0.0.0, retrying...
[Wed Apr 16 09:19:51.241 2014] [18567] bind() failed on 0.0.0.0, retrying...
[Wed Apr 16 09:19:54.244 2014] [18567] bind() failed on 0.0.0.0, retrying...
[Wed Apr 16 09:19:55.877 2014] [18567] bind() failed on 0.0.0.0, retrying...
[Wed Apr 16 09:19:58.881 2014] [18567] bind() failed on 0.0.0.0, retrying...
[Wed Apr 16 09:20:01.884 2014] [18567] FATAL: bind() failed on 0.0.0.0: Address already in use
[Wed Apr 16 09:20:08.674 2014] [18629] listening on all interfaces, port=9306
[Wed Apr 16 09:20:08.674 2014] [18629] bind() failed on 0.0.0.0, retrying...
[Wed Apr 16 09:20:11.674 2014] [18629] bind() failed on 0.0.0.0, retrying...
[Wed Apr 16 09:20:14.677 2014] [18629] bind() failed on 0.0.0.0, retrying...
[Wed Apr 16 09:20:18.330 2014] [18629] last message repeated 1 times
[Wed Apr 16 09:20:18.330 2014] [18629] bind() failed on 0.0.0.0, retrying...
[Wed Apr 16 09:20:21.024 2014] [18629] bind() failed on 0.0.0.0, retrying...
[Wed Apr 16 09:20:24.027 2014] [18629] bind() failed on 0.0.0.0, retrying...
[Wed Apr 16 09:20:27.030 2014] [18629] bind() failed on 0.0.0.0, retrying...
[Wed Apr 16 09:20:30.033 2014] [18629] bind() failed on 0.0.0.0, retrying...
[Wed Apr 16 09:20:33.036 2014] [18629] bind() failed on 0.0.0.0, retrying...
[Wed Apr 16 09:20:36.039 2014] [18629] bind() failed on 0.0.0.0, retrying...
[Wed Apr 16 09:20:39.042 2014] [18629] bind() failed on 0.0.0.0, retrying...
[Wed Apr 16 09:20:42.056 2014] [18629] FATAL: bind() failed on 0.0.0.0: Address already in use
[Wed Apr 16 09:27:54.222 2014] [32117] caught SIGTERM, shutting down
[Wed Apr 16 09:27:54.236 2014] [32117] shutdown complete
[Wed Apr 16 09:28:40.561 2014] [18725] listening on all interfaces, port=9306
[Wed Apr 16 09:28:40.561 2014] [18725] listening on all interfaces, port=9312
[Wed Apr 16 09:28:41.471 2014] [18725] WARNING: id32 index loaded by id64 binary; attributes converted
[Wed Apr 16 09:28:42.091 2014] [18726] last message repeated 1 times
[Wed Apr 16 09:28:42.091 2014] [18726] accepting connections
[Wed Apr 16 09:29:50.652 2014] [18726] caught SIGHUP (seamless=1, in queue=1)
[Wed Apr 16 09:29:50.726 2014] [18726] rotating index 'shinsIndex': success
[Wed Apr 16 09:29:50.775 2014] [18726] rotating finished
[Wed Apr 16 09:30:08.689 2014] [18726] caught SIGHUP (seamless=1, in queue=1)
[Wed Apr 16 09:30:08.710 2014] [18818] WARNING: id32 index loaded by id64 binary; attributes converted
------- FATAL: CRASH DUMP -------
[Wed Apr 16 09:30:08.689 2014] [18726]

--- crashed SphinxAPI request dump ---

--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x49b5d7]
/usr/bin/searchd[0x42290e]
/usr/bin/searchd[0x422baf]
/usr/bin/searchd[0x42e598]
/usr/bin/searchd[0x445875]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 12): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
[Wed Apr 16 09:30:08.850 2014] [18726] WARNING: pipe status read failed (handler=0)
[Wed Apr 16 09:30:08.851 2014] [18726] rotating finished
[Wed Apr 30 17:22:32.725 2014] [18726] caught SIGHUP (seamless=1, in queue=1)
[Wed Apr 30 17:22:32.854 2014] [11992] WARNING: id32 index loaded by id64 binary; attributes converted
[Wed Apr 30 17:22:39.771 2014] [18726] rotating index 'disksIndex': success
[Wed Apr 30 17:22:39.800 2014] [18726] rotating finished
------- FATAL: CRASH DUMP -------
[Wed Apr 30 17:24:14.874 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed Apr 30 17:24:59.049 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT MIN(price) AS min_price, MAX(price) AS max_price, 1 AS one, COUNT(*) AS cnt 
FROM disksIndex WHERE price > 0 GROUP BY one;SELECT disks_rim_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_rim_diametr 
> 0.0
                   GROUP BY disks_rim_diametr
                   ORDER BY 
disks_rim_diametr ASC
                   LIMIT 500000;SELECT disks_type_id, disks_type,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_type_id 
> 1
                   GROUP BY disks_type_id
                   ORDER BY disks_type 
ASC
                   LIMIT 500000;SELECT disks_rim_width, COUNT(*) AS cnt
    
               FROM disksIndex
                   WHERE disks_rim_width > 0.0
  
                 GROUP BY disks_rim_width
                   ORDER BY disks_rim_width 
ASC
                   LIMIT 500000;SELECT disks_port_position, COUNT(*) AS cnt

                   FROM disksIndex
                   WHERE disks_port_position > 
0.0
                   GROUP BY disks_port_position
                   ORDER BY 
disks_port_position ASC
                   LIMIT 500000;SELECT disks_fixture_port_count,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_count 
> 0
                   GROUP BY disks_fixture_port_count
                   ORDER 
BY disks_fixture_port_count ASC
                   LIMIT 500000;SELECT disks_boom,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_boom 
> 0.0
                   GROUP BY disks_boom
                   ORDER BY disks_boom 
ASC
                   LIMIT 500000;SELECT disks_fixture_port_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_diametr 
> 0.0
                   GROUP BY disks_fixture_port_diametr
                   
ORDER BY disks_fixture_port_diametr ASC
                   LIMIT 500000;SELECT disks_color_translit,
 disks_color, COUNT(*) AS cnt FROM disksIndex GROUP BY disks_color
              
   ORDER BY disks_color ASC
                 LIMIT 500000;SELECT vendor_id, vendor_name,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE vendor_id 
> 1
                   GROUP BY vendor_id
                   ORDER BY vendor_name 
ASC
                   LIMIT 500000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x577e00]
/usr/bin/searchd[0x56c601]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x441e2d]
/usr/bin/searchd[0x4420da]
/usr/bin/searchd[0x466d68]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 20): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed Apr 30 17:25:06.374 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT MIN(price) AS min_price, MAX(price) AS max_price, 1 AS one, COUNT(*) AS cnt 
FROM disksIndex WHERE price > 0 GROUP BY one;SELECT disks_rim_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_rim_diametr 
> 0.0
                   GROUP BY disks_rim_diametr
                   ORDER BY 
disks_rim_diametr ASC
                   LIMIT 500000;SELECT disks_type_id, disks_type,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_type_id 
> 1
                   GROUP BY disks_type_id
                   ORDER BY disks_type 
ASC
                   LIMIT 500000;SELECT disks_rim_width, COUNT(*) AS cnt
    
               FROM disksIndex
                   WHERE disks_rim_width > 0.0
  
                 GROUP BY disks_rim_width
                   ORDER BY disks_rim_width 
ASC
                   LIMIT 500000;SELECT disks_port_position, COUNT(*) AS cnt

                   FROM disksIndex
                   WHERE disks_port_position > 
0.0
                   GROUP BY disks_port_position
                   ORDER BY 
disks_port_position ASC
                   LIMIT 500000;SELECT disks_fixture_port_count,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_count 
> 0
                   GROUP BY disks_fixture_port_count
                   ORDER 
BY disks_fixture_port_count ASC
                   LIMIT 500000;SELECT disks_boom,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_boom 
> 0.0
                   GROUP BY disks_boom
                   ORDER BY disks_boom 
ASC
                   LIMIT 500000;SELECT disks_fixture_port_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_diametr 
> 0.0
                   GROUP BY disks_fixture_port_diametr
                   
ORDER BY disks_fixture_port_diametr ASC
                   LIMIT 500000;SELECT disks_color_translit,
 disks_color, COUNT(*) AS cnt FROM disksIndex GROUP BY disks_color
              
   ORDER BY disks_color ASC
                 LIMIT 500000;SELECT vendor_id, vendor_name,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE vendor_id 
> 1
                   GROUP BY vendor_id
                   ORDER BY vendor_name 
ASC
                   LIMIT 500000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x577e00]
/usr/bin/searchd[0x56c601]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x441e2d]
/usr/bin/searchd[0x4420da]
/usr/bin/searchd[0x466d68]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 20): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed Apr 30 17:25:09.376 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT MIN(price) AS min_price, MAX(price) AS max_price, 1 AS one, COUNT(*) AS cnt 
FROM disksIndex WHERE price > 0 GROUP BY one;SELECT disks_rim_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_rim_diametr 
> 0.0
                   GROUP BY disks_rim_diametr
                   ORDER BY 
disks_rim_diametr ASC
                   LIMIT 500000;SELECT disks_type_id, disks_type,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_type_id 
> 1
                   GROUP BY disks_type_id
                   ORDER BY disks_type 
ASC
                   LIMIT 500000;SELECT disks_rim_width, COUNT(*) AS cnt
    
               FROM disksIndex
                   WHERE disks_rim_width > 0.0
  
                 GROUP BY disks_rim_width
                   ORDER BY disks_rim_width 
ASC
                   LIMIT 500000;SELECT disks_port_position, COUNT(*) AS cnt

                   FROM disksIndex
                   WHERE disks_port_position > 
0.0
                   GROUP BY disks_port_position
                   ORDER BY 
disks_port_position ASC
                   LIMIT 500000;SELECT disks_fixture_port_count,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_count 
> 0
                   GROUP BY disks_fixture_port_count
                   ORDER 
BY disks_fixture_port_count ASC
                   LIMIT 500000;SELECT disks_boom,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_boom 
> 0.0
                   GROUP BY disks_boom
                   ORDER BY disks_boom 
ASC
                   LIMIT 500000;SELECT disks_fixture_port_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_diametr 
> 0.0
                   GROUP BY disks_fixture_port_diametr
                   
ORDER BY disks_fixture_port_diametr ASC
                   LIMIT 500000;SELECT disks_color_translit,
 disks_color, COUNT(*) AS cnt FROM disksIndex GROUP BY disks_color
              
   ORDER BY disks_color ASC
                 LIMIT 500000;SELECT vendor_id, vendor_name,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE vendor_id 
> 1
                   GROUP BY vendor_id
                   ORDER BY vendor_name 
ASC
                   LIMIT 500000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x577e00]
/usr/bin/searchd[0x56c601]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x441e2d]
/usr/bin/searchd[0x4420da]
/usr/bin/searchd[0x466d68]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 20): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed Apr 30 17:25:45.322 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT MIN(price) AS min_price, MAX(price) AS max_price, 1 AS one, COUNT(*) AS cnt 
FROM disksIndex WHERE price > 0 GROUP BY one;SELECT disks_rim_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_rim_diametr 
> 0.0
                   GROUP BY disks_rim_diametr
                   ORDER BY 
disks_rim_diametr ASC
                   LIMIT 500000;SELECT disks_type_id, disks_type,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_type_id 
> 1
                   GROUP BY disks_type_id
                   ORDER BY disks_type 
ASC
                   LIMIT 500000;SELECT disks_rim_width, COUNT(*) AS cnt
    
               FROM disksIndex
                   WHERE disks_rim_width > 0.0
  
                 GROUP BY disks_rim_width
                   ORDER BY disks_rim_width 
ASC
                   LIMIT 500000;SELECT disks_port_position, COUNT(*) AS cnt

                   FROM disksIndex
                   WHERE disks_port_position > 
0.0
                   GROUP BY disks_port_position
                   ORDER BY 
disks_port_position ASC
                   LIMIT 500000;SELECT disks_fixture_port_count,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_count 
> 0
                   GROUP BY disks_fixture_port_count
                   ORDER 
BY disks_fixture_port_count ASC
                   LIMIT 500000;SELECT disks_boom,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_boom 
> 0.0
                   GROUP BY disks_boom
                   ORDER BY disks_boom 
ASC
                   LIMIT 500000;SELECT disks_fixture_port_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_diametr 
> 0.0
                   GROUP BY disks_fixture_port_diametr
                   
ORDER BY disks_fixture_port_diametr ASC
                   LIMIT 500000;SELECT disks_color_translit,
 disks_color, COUNT(*) AS cnt FROM disksIndex GROUP BY disks_color
              
   ORDER BY disks_color ASC
                 LIMIT 500000;SELECT vendor_id, vendor_name,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE vendor_id 
> 1
                   GROUP BY vendor_id
                   ORDER BY vendor_name 
ASC
                   LIMIT 500000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x577e00]
/usr/bin/searchd[0x56c601]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x441e2d]
/usr/bin/searchd[0x4420da]
/usr/bin/searchd[0x466d68]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 20): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed Apr 30 17:25:46.817 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT MIN(price) AS min_price, MAX(price) AS max_price, 1 AS one, COUNT(*) AS cnt 
FROM disksIndex WHERE price > 0 GROUP BY one;SELECT disks_rim_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_rim_diametr 
> 0.0
                   GROUP BY disks_rim_diametr
                   ORDER BY 
disks_rim_diametr ASC
                   LIMIT 500000;SELECT disks_type_id, disks_type,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_type_id 
> 1
                   GROUP BY disks_type_id
                   ORDER BY disks_type 
ASC
                   LIMIT 500000;SELECT disks_rim_width, COUNT(*) AS cnt
    
               FROM disksIndex
                   WHERE disks_rim_width > 0.0
  
                 GROUP BY disks_rim_width
                   ORDER BY disks_rim_width 
ASC
                   LIMIT 500000;SELECT disks_port_position, COUNT(*) AS cnt

                   FROM disksIndex
                   WHERE disks_port_position > 
0.0
                   GROUP BY disks_port_position
                   ORDER BY 
disks_port_position ASC
                   LIMIT 500000;SELECT disks_fixture_port_count,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_count 
> 0
                   GROUP BY disks_fixture_port_count
                   ORDER 
BY disks_fixture_port_count ASC
                   LIMIT 500000;SELECT disks_boom,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_boom 
> 0.0
                   GROUP BY disks_boom
                   ORDER BY disks_boom 
ASC
                   LIMIT 500000;SELECT disks_fixture_port_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_diametr 
> 0.0
                   GROUP BY disks_fixture_port_diametr
                   
ORDER BY disks_fixture_port_diametr ASC
                   LIMIT 500000;SELECT disks_color_translit,
 disks_color, COUNT(*) AS cnt FROM disksIndex GROUP BY disks_color
              
   ORDER BY disks_color ASC
                 LIMIT 500000;SELECT vendor_id, vendor_name,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE vendor_id 
> 1
                   GROUP BY vendor_id
                   ORDER BY vendor_name 
ASC
                   LIMIT 500000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x577e00]
/usr/bin/searchd[0x56c601]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x441e2d]
/usr/bin/searchd[0x4420da]
/usr/bin/searchd[0x466d68]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 20): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed Apr 30 17:25:49.054 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT MIN(price) AS min_price, MAX(price) AS max_price, 1 AS one, COUNT(*) AS cnt 
FROM disksIndex WHERE price > 0 GROUP BY one;SELECT disks_rim_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_rim_diametr 
> 0.0
                   GROUP BY disks_rim_diametr
                   ORDER BY 
disks_rim_diametr ASC
                   LIMIT 500000;SELECT disks_type_id, disks_type,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_type_id 
> 1
                   GROUP BY disks_type_id
                   ORDER BY disks_type 
ASC
                   LIMIT 500000;SELECT disks_rim_width, COUNT(*) AS cnt
    
               FROM disksIndex
                   WHERE disks_rim_width > 0.0
  
                 GROUP BY disks_rim_width
                   ORDER BY disks_rim_width 
ASC
                   LIMIT 500000;SELECT disks_port_position, COUNT(*) AS cnt

                   FROM disksIndex
                   WHERE disks_port_position > 
0.0
                   GROUP BY disks_port_position
                   ORDER BY 
disks_port_position ASC
                   LIMIT 500000;SELECT disks_fixture_port_count,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_count 
> 0
                   GROUP BY disks_fixture_port_count
                   ORDER 
BY disks_fixture_port_count ASC
                   LIMIT 500000;SELECT disks_boom,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_boom 
> 0.0
                   GROUP BY disks_boom
                   ORDER BY disks_boom 
ASC
                   LIMIT 500000;SELECT disks_fixture_port_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_diametr 
> 0.0
                   GROUP BY disks_fixture_port_diametr
                   
ORDER BY disks_fixture_port_diametr ASC
                   LIMIT 500000;SELECT disks_color_translit,
 disks_color, COUNT(*) AS cnt FROM disksIndex GROUP BY disks_color
              
   ORDER BY disks_color ASC
                 LIMIT 500000;SELECT vendor_id, vendor_name,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE vendor_id 
> 1
                   GROUP BY vendor_id
                   ORDER BY vendor_name 
ASC
                   LIMIT 500000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x577e00]
/usr/bin/searchd[0x56c601]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x441e2d]
/usr/bin/searchd[0x4420da]
/usr/bin/searchd[0x466d68]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 20): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed Apr 30 17:25:50.612 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT MIN(price) AS min_price, MAX(price) AS max_price, 1 AS one, COUNT(*) AS cnt 
FROM disksIndex WHERE price > 0 GROUP BY one;SELECT disks_rim_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_rim_diametr 
> 0.0
                   GROUP BY disks_rim_diametr
                   ORDER BY 
disks_rim_diametr ASC
                   LIMIT 500000;SELECT disks_type_id, disks_type,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_type_id 
> 1
                   GROUP BY disks_type_id
                   ORDER BY disks_type 
ASC
                   LIMIT 500000;SELECT disks_rim_width, COUNT(*) AS cnt
    
               FROM disksIndex
                   WHERE disks_rim_width > 0.0
  
                 GROUP BY disks_rim_width
                   ORDER BY disks_rim_width 
ASC
                   LIMIT 500000;SELECT disks_port_position, COUNT(*) AS cnt

                   FROM disksIndex
                   WHERE disks_port_position > 
0.0
                   GROUP BY disks_port_position
                   ORDER BY 
disks_port_position ASC
                   LIMIT 500000;SELECT disks_fixture_port_count,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_count 
> 0
                   GROUP BY disks_fixture_port_count
                   ORDER 
BY disks_fixture_port_count ASC
                   LIMIT 500000;SELECT disks_boom,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_boom 
> 0.0
                   GROUP BY disks_boom
                   ORDER BY disks_boom 
ASC
                   LIMIT 500000;SELECT disks_fixture_port_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_diametr 
> 0.0
                   GROUP BY disks_fixture_port_diametr
                   
ORDER BY disks_fixture_port_diametr ASC
                   LIMIT 500000;SELECT disks_color_translit,
 disks_color, COUNT(*) AS cnt FROM disksIndex GROUP BY disks_color
              
   ORDER BY disks_color ASC
                 LIMIT 500000;SELECT vendor_id, vendor_name,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE vendor_id 
> 1
                   GROUP BY vendor_id
                   ORDER BY vendor_name 
ASC
                   LIMIT 500000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x577e00]
/usr/bin/searchd[0x56c601]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x441e2d]
/usr/bin/searchd[0x4420da]
/usr/bin/searchd[0x466d68]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 20): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed Apr 30 17:26:12.027 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT MIN(price) AS min_price, MAX(price) AS max_price, 1 AS one, COUNT(*) AS cnt 
FROM disksIndex WHERE price > 0 GROUP BY one;SELECT disks_rim_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_rim_diametr 
> 0.0
                   GROUP BY disks_rim_diametr
                   ORDER BY 
disks_rim_diametr ASC
                   LIMIT 500000;SELECT disks_type_id, disks_type,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_type_id 
> 1
                   GROUP BY disks_type_id
                   ORDER BY disks_type 
ASC
                   LIMIT 500000;SELECT disks_rim_width, COUNT(*) AS cnt
    
               FROM disksIndex
                   WHERE disks_rim_width > 0.0
  
                 GROUP BY disks_rim_width
                   ORDER BY disks_rim_width 
ASC
                   LIMIT 500000;SELECT disks_port_position, COUNT(*) AS cnt

                   FROM disksIndex
                   WHERE disks_port_position > 
0.0
                   GROUP BY disks_port_position
                   ORDER BY 
disks_port_position ASC
                   LIMIT 500000;SELECT disks_fixture_port_count,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_count 
> 0
                   GROUP BY disks_fixture_port_count
                   ORDER 
BY disks_fixture_port_count ASC
                   LIMIT 500000;SELECT disks_boom,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_boom 
> 0.0
                   GROUP BY disks_boom
                   ORDER BY disks_boom 
ASC
                   LIMIT 500000;SELECT disks_fixture_port_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_diametr 
> 0.0
                   GROUP BY disks_fixture_port_diametr
                   
ORDER BY disks_fixture_port_diametr ASC
                   LIMIT 500000;SELECT disks_color_translit,
 disks_color, COUNT(*) AS cnt FROM disksIndex GROUP BY disks_color
              
   ORDER BY disks_color ASC
                 LIMIT 500000;SELECT vendor_id, vendor_name,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE vendor_id 
> 1
                   GROUP BY vendor_id
                   ORDER BY vendor_name 
ASC
                   LIMIT 500000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x577e00]
/usr/bin/searchd[0x56c601]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x441e2d]
/usr/bin/searchd[0x4420da]
/usr/bin/searchd[0x466d68]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 20): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed Apr 30 17:31:58.173 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed Apr 30 17:32:04.742 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT MIN(price) AS min_price, MAX(price) AS max_price, 1 AS one, COUNT(*) AS cnt 
FROM disksIndex WHERE price > 0 GROUP BY one;SELECT disks_rim_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_rim_diametr 
> 0.0
                   GROUP BY disks_rim_diametr
                   ORDER BY 
disks_rim_diametr ASC
                   LIMIT 500000;SELECT disks_type_id, disks_type,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_type_id 
> 1
                   GROUP BY disks_type_id
                   ORDER BY disks_type 
ASC
                   LIMIT 500000;SELECT disks_rim_width, COUNT(*) AS cnt
    
               FROM disksIndex
                   WHERE disks_rim_width > 0.0
  
                 GROUP BY disks_rim_width
                   ORDER BY disks_rim_width 
ASC
                   LIMIT 500000;SELECT disks_port_position, COUNT(*) AS cnt

                   FROM disksIndex
                   WHERE disks_port_position > 
0.0
                   GROUP BY disks_port_position
                   ORDER BY 
disks_port_position ASC
                   LIMIT 500000;SELECT disks_fixture_port_count,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_count 
> 0
                   GROUP BY disks_fixture_port_count
                   ORDER 
BY disks_fixture_port_count ASC
                   LIMIT 500000;SELECT disks_boom,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_boom 
> 0.0
                   GROUP BY disks_boom
                   ORDER BY disks_boom 
ASC
                   LIMIT 500000;SELECT disks_fixture_port_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_diametr 
> 0.0
                   GROUP BY disks_fixture_port_diametr
                   
ORDER BY disks_fixture_port_diametr ASC
                   LIMIT 500000;SELECT disks_color_translit,
 disks_color, COUNT(*) AS cnt FROM disksIndex GROUP BY disks_color
              
   ORDER BY disks_color ASC
                 LIMIT 500000;SELECT vendor_id, vendor_name,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE vendor_id 
> 1
                   GROUP BY vendor_id
                   ORDER BY vendor_name 
ASC
                   LIMIT 500000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x577e00]
/usr/bin/searchd[0x56c601]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x441e2d]
/usr/bin/searchd[0x4420da]
/usr/bin/searchd[0x466d68]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 20): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed Apr 30 17:32:07.638 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT MIN(price) AS min_price, MAX(price) AS max_price, 1 AS one, COUNT(*) AS cnt 
FROM disksIndex WHERE price > 0 GROUP BY one;SELECT disks_rim_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_rim_diametr 
> 0.0
                   GROUP BY disks_rim_diametr
                   ORDER BY 
disks_rim_diametr ASC
                   LIMIT 500000;SELECT disks_type_id, disks_type,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_type_id 
> 1
                   GROUP BY disks_type_id
                   ORDER BY disks_type 
ASC
                   LIMIT 500000;SELECT disks_rim_width, COUNT(*) AS cnt
    
               FROM disksIndex
                   WHERE disks_rim_width > 0.0
  
                 GROUP BY disks_rim_width
                   ORDER BY disks_rim_width 
ASC
                   LIMIT 500000;SELECT disks_port_position, COUNT(*) AS cnt

                   FROM disksIndex
                   WHERE disks_port_position > 
0.0
                   GROUP BY disks_port_position
                   ORDER BY 
disks_port_position ASC
                   LIMIT 500000;SELECT disks_fixture_port_count,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_count 
> 0
                   GROUP BY disks_fixture_port_count
                   ORDER 
BY disks_fixture_port_count ASC
                   LIMIT 500000;SELECT disks_boom,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_boom 
> 0.0
                   GROUP BY disks_boom
                   ORDER BY disks_boom 
ASC
                   LIMIT 500000;SELECT disks_fixture_port_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_diametr 
> 0.0
                   GROUP BY disks_fixture_port_diametr
                   
ORDER BY disks_fixture_port_diametr ASC
                   LIMIT 500000;SELECT disks_color_translit,
 disks_color, COUNT(*) AS cnt FROM disksIndex GROUP BY disks_color
              
   ORDER BY disks_color ASC
                 LIMIT 500000;SELECT vendor_id, vendor_name,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE vendor_id 
> 1
                   GROUP BY vendor_id
                   ORDER BY vendor_name 
ASC
                   LIMIT 500000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x577e00]
/usr/bin/searchd[0x56c601]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x441e2d]
/usr/bin/searchd[0x4420da]
/usr/bin/searchd[0x466d68]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 20): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed Apr 30 17:40:24.526 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT MIN(price) AS min_price, MAX(price) AS max_price, 1 AS one, COUNT(*) AS cnt 
FROM disksIndex WHERE price > 0 GROUP BY one;SELECT disks_rim_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_rim_diametr 
> 0.0
                   GROUP BY disks_rim_diametr
                   ORDER BY 
disks_rim_diametr ASC
                   LIMIT 500000;SELECT disks_type_id, disks_type,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_type_id 
> 1
                   GROUP BY disks_type_id
                   ORDER BY disks_type 
ASC
                   LIMIT 500000;SELECT disks_rim_width, COUNT(*) AS cnt
    
               FROM disksIndex
                   WHERE disks_rim_width > 0.0
  
                 GROUP BY disks_rim_width
                   ORDER BY disks_rim_width 
ASC
                   LIMIT 500000;SELECT disks_port_position, COUNT(*) AS cnt

                   FROM disksIndex
                   WHERE disks_port_position > 
0.0
                   GROUP BY disks_port_position
                   ORDER BY 
disks_port_position ASC
                   LIMIT 500000;SELECT disks_fixture_port_count,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_count 
> 0
                   GROUP BY disks_fixture_port_count
                   ORDER 
BY disks_fixture_port_count ASC
                   LIMIT 500000;SELECT disks_boom,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_boom 
> 0.0
                   GROUP BY disks_boom
                   ORDER BY disks_boom 
ASC
                   LIMIT 500000;SELECT disks_fixture_port_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_diametr 
> 0.0
                   GROUP BY disks_fixture_port_diametr
                   
ORDER BY disks_fixture_port_diametr ASC
                   LIMIT 500000;SELECT disks_color_translit,
 disks_color, COUNT(*) AS cnt FROM disksIndex GROUP BY disks_color
              
   ORDER BY disks_color ASC
                 LIMIT 500000;SELECT vendor_id, vendor_name,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE vendor_id 
> 1
                   GROUP BY vendor_id
                   ORDER BY vendor_name 
ASC
                   LIMIT 500000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x577e00]
/usr/bin/searchd[0x56c601]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x441e2d]
/usr/bin/searchd[0x4420da]
/usr/bin/searchd[0x466d68]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 20): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed Apr 30 17:40:27.469 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT MIN(price) AS min_price, MAX(price) AS max_price, 1 AS one, COUNT(*) AS cnt 
FROM disksIndex WHERE price > 0 GROUP BY one;SELECT disks_rim_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_rim_diametr 
> 0.0
                   GROUP BY disks_rim_diametr
                   ORDER BY 
disks_rim_diametr ASC
                   LIMIT 500000;SELECT disks_type_id, disks_type,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_type_id 
> 1
                   GROUP BY disks_type_id
                   ORDER BY disks_type 
ASC
                   LIMIT 500000;SELECT disks_rim_width, COUNT(*) AS cnt
    
               FROM disksIndex
                   WHERE disks_rim_width > 0.0
  
                 GROUP BY disks_rim_width
                   ORDER BY disks_rim_width 
ASC
                   LIMIT 500000;SELECT disks_port_position, COUNT(*) AS cnt

                   FROM disksIndex
                   WHERE disks_port_position > 
0.0
                   GROUP BY disks_port_position
                   ORDER BY 
disks_port_position ASC
                   LIMIT 500000;SELECT disks_fixture_port_count,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_count 
> 0
                   GROUP BY disks_fixture_port_count
                   ORDER 
BY disks_fixture_port_count ASC
                   LIMIT 500000;SELECT disks_boom,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_boom 
> 0.0
                   GROUP BY disks_boom
                   ORDER BY disks_boom 
ASC
                   LIMIT 500000;SELECT disks_fixture_port_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_diametr 
> 0.0
                   GROUP BY disks_fixture_port_diametr
                   
ORDER BY disks_fixture_port_diametr ASC
                   LIMIT 500000;SELECT disks_color_translit,
 disks_color, COUNT(*) AS cnt FROM disksIndex GROUP BY disks_color
              
   ORDER BY disks_color ASC
                 LIMIT 500000;SELECT vendor_id, vendor_name,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE vendor_id 
> 1
                   GROUP BY vendor_id
                   ORDER BY vendor_name 
ASC
                   LIMIT 500000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x577e00]
/usr/bin/searchd[0x56c601]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x441e2d]
/usr/bin/searchd[0x4420da]
/usr/bin/searchd[0x466d68]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 20): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed Apr 30 17:40:33.276 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed Apr 30 17:40:36.468 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed Apr 30 17:44:04.789 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed Apr 30 17:44:08.006 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT MIN(price) AS min_price, MAX(price) AS max_price, 1 AS one, COUNT(*) AS cnt 
FROM disksIndex WHERE price > 0 GROUP BY one;SELECT disks_rim_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_rim_diametr 
> 0.0
                   GROUP BY disks_rim_diametr
                   ORDER BY 
disks_rim_diametr ASC
                   LIMIT 500000;SELECT disks_type_id, disks_type,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_type_id 
> 1
                   GROUP BY disks_type_id
                   ORDER BY disks_type 
ASC
                   LIMIT 500000;SELECT disks_rim_width, COUNT(*) AS cnt
    
               FROM disksIndex
                   WHERE disks_rim_width > 0.0
  
                 GROUP BY disks_rim_width
                   ORDER BY disks_rim_width 
ASC
                   LIMIT 500000;SELECT disks_port_position, COUNT(*) AS cnt

                   FROM disksIndex
                   WHERE disks_port_position > 
0.0
                   GROUP BY disks_port_position
                   ORDER BY 
disks_port_position ASC
                   LIMIT 500000;SELECT disks_fixture_port_count,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_count 
> 0
                   GROUP BY disks_fixture_port_count
                   ORDER 
BY disks_fixture_port_count ASC
                   LIMIT 500000;SELECT disks_boom,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_boom 
> 0.0
                   GROUP BY disks_boom
                   ORDER BY disks_boom 
ASC
                   LIMIT 500000;SELECT disks_fixture_port_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_diametr 
> 0.0
                   GROUP BY disks_fixture_port_diametr
                   
ORDER BY disks_fixture_port_diametr ASC
                   LIMIT 500000;SELECT disks_color_translit,
 disks_color, COUNT(*) AS cnt FROM disksIndex GROUP BY disks_color
              
   ORDER BY disks_color ASC
                 LIMIT 500000;SELECT vendor_id, vendor_name,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE vendor_id 
> 1
                   GROUP BY vendor_id
                   ORDER BY vendor_name 
ASC
                   LIMIT 500000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x577e00]
/usr/bin/searchd[0x56c601]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x441e2d]
/usr/bin/searchd[0x4420da]
/usr/bin/searchd[0x466d68]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 20): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed Apr 30 17:44:10.670 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT MIN(price) AS min_price, MAX(price) AS max_price, 1 AS one, COUNT(*) AS cnt 
FROM disksIndex WHERE price > 0 GROUP BY one;SELECT disks_rim_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_rim_diametr 
> 0.0
                   GROUP BY disks_rim_diametr
                   ORDER BY 
disks_rim_diametr ASC
                   LIMIT 500000;SELECT disks_type_id, disks_type,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_type_id 
> 1
                   GROUP BY disks_type_id
                   ORDER BY disks_type 
ASC
                   LIMIT 500000;SELECT disks_rim_width, COUNT(*) AS cnt
    
               FROM disksIndex
                   WHERE disks_rim_width > 0.0
  
                 GROUP BY disks_rim_width
                   ORDER BY disks_rim_width 
ASC
                   LIMIT 500000;SELECT disks_port_position, COUNT(*) AS cnt

                   FROM disksIndex
                   WHERE disks_port_position > 
0.0
                   GROUP BY disks_port_position
                   ORDER BY 
disks_port_position ASC
                   LIMIT 500000;SELECT disks_fixture_port_count,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_count 
> 0
                   GROUP BY disks_fixture_port_count
                   ORDER 
BY disks_fixture_port_count ASC
                   LIMIT 500000;SELECT disks_boom,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_boom 
> 0.0
                   GROUP BY disks_boom
                   ORDER BY disks_boom 
ASC
                   LIMIT 500000;SELECT disks_fixture_port_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_diametr 
> 0.0
                   GROUP BY disks_fixture_port_diametr
                   
ORDER BY disks_fixture_port_diametr ASC
                   LIMIT 500000;SELECT disks_color_translit,
 disks_color, COUNT(*) AS cnt FROM disksIndex GROUP BY disks_color
              
   ORDER BY disks_color ASC
                 LIMIT 500000;SELECT vendor_id, vendor_name,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE vendor_id 
> 1
                   GROUP BY vendor_id
                   ORDER BY vendor_name 
ASC
                   LIMIT 500000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x577e00]
/usr/bin/searchd[0x56c601]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x441e2d]
/usr/bin/searchd[0x4420da]
/usr/bin/searchd[0x466d68]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 20): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed Apr 30 17:44:11.889 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed Apr 30 18:55:41.793 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed Apr 30 18:55:44.712 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed Apr 30 18:55:49.608 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed Apr 30 18:55:53.220 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Thu May  1 10:15:16.618 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Thu May  1 10:54:21.544 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Thu May  1 10:54:44.747 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Thu May  1 10:55:58.459 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Thu May  1 20:59:37.073 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Fri May  2 10:10:05.814 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Fri May  2 12:03:41.366 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Fri May  2 12:45:45.724 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Fri May  2 19:13:52.187 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Sat May  3 10:27:26.996 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Sat May  3 14:37:31.784 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Sat May  3 14:41:23.511 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Sat May  3 23:34:50.641 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Sun May  4 11:03:43.325 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Sun May  4 12:07:28.997 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Sun May  4 14:11:22.104 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Sun May  4 17:34:03.693 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Sun May  4 20:14:56.941 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Mon May  5 10:26:12.647 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Mon May  5 10:28:14.582 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT MIN(price) AS min_price, MAX(price) AS max_price, 1 AS one, COUNT(*) AS cnt 
FROM disksIndex WHERE price > 0 GROUP BY one;SELECT disks_rim_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_rim_diametr 
> 0.0
                   GROUP BY disks_rim_diametr
                   ORDER BY 
disks_rim_diametr ASC
                   LIMIT 500000;SELECT disks_type_id, disks_type,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_type_id 
> 1
                   GROUP BY disks_type_id
                   ORDER BY disks_type 
ASC
                   LIMIT 500000;SELECT disks_rim_width, COUNT(*) AS cnt
    
               FROM disksIndex
                   WHERE disks_rim_width > 0.0
  
                 GROUP BY disks_rim_width
                   ORDER BY disks_rim_width 
ASC
                   LIMIT 500000;SELECT disks_port_position, COUNT(*) AS cnt

                   FROM disksIndex
                   WHERE disks_port_position > 
0.0
                   GROUP BY disks_port_position
                   ORDER BY 
disks_port_position ASC
                   LIMIT 500000;SELECT disks_fixture_port_count,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_count 
> 0
                   GROUP BY disks_fixture_port_count
                   ORDER 
BY disks_fixture_port_count ASC
                   LIMIT 500000;SELECT disks_boom,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_boom 
> 0.0
                   GROUP BY disks_boom
                   ORDER BY disks_boom 
ASC
                   LIMIT 500000;SELECT disks_fixture_port_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_diametr 
> 0.0
                   GROUP BY disks_fixture_port_diametr
                   
ORDER BY disks_fixture_port_diametr ASC
                   LIMIT 500000;SELECT disks_color_translit,
 disks_color, COUNT(*) AS cnt FROM disksIndex GROUP BY disks_color
              
   ORDER BY disks_color ASC
                 LIMIT 500000;SELECT vendor_id, vendor_name,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE vendor_id 
> 1
                   GROUP BY vendor_id
                   ORDER BY vendor_name 
ASC
                   LIMIT 500000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x577e00]
/usr/bin/searchd[0x56c601]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x441e2d]
/usr/bin/searchd[0x4420da]
/usr/bin/searchd[0x466d68]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 20): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Mon May  5 11:43:10.693 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Mon May  5 16:09:28.134 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Mon May  5 16:09:32.543 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Mon May  5 19:18:57.786 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Mon May  5 19:49:42.044 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Mon May  5 20:33:28.840 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Mon May  5 20:37:43.959 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 00:03:49.590 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 00:04:03.120 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 00:04:05.318 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 11:27:07.833 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 12:11:10.032 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT MIN(price) AS min_price, MAX(price) AS max_price, 1 AS one, COUNT(*) AS cnt 
FROM disksIndex WHERE price > 0 GROUP BY one;SELECT disks_rim_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_rim_diametr 
> 0.0
                   GROUP BY disks_rim_diametr
                   ORDER BY 
disks_rim_diametr ASC
                   LIMIT 500000;SELECT disks_type_id, disks_type,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_type_id 
> 1
                   GROUP BY disks_type_id
                   ORDER BY disks_type 
ASC
                   LIMIT 500000;SELECT disks_rim_width, COUNT(*) AS cnt
    
               FROM disksIndex
                   WHERE disks_rim_width > 0.0
  
                 GROUP BY disks_rim_width
                   ORDER BY disks_rim_width 
ASC
                   LIMIT 500000;SELECT disks_port_position, COUNT(*) AS cnt

                   FROM disksIndex
                   WHERE disks_port_position > 
0.0
                   GROUP BY disks_port_position
                   ORDER BY 
disks_port_position ASC
                   LIMIT 500000;SELECT disks_fixture_port_count,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_count 
> 0
                   GROUP BY disks_fixture_port_count
                   ORDER 
BY disks_fixture_port_count ASC
                   LIMIT 500000;SELECT disks_boom,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_boom 
> 0.0
                   GROUP BY disks_boom
                   ORDER BY disks_boom 
ASC
                   LIMIT 500000;SELECT disks_fixture_port_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_diametr 
> 0.0
                   GROUP BY disks_fixture_port_diametr
                   
ORDER BY disks_fixture_port_diametr ASC
                   LIMIT 500000;SELECT disks_color_translit,
 disks_color, COUNT(*) AS cnt FROM disksIndex GROUP BY disks_color
              
   ORDER BY disks_color ASC
                 LIMIT 500000;SELECT vendor_id, vendor_name,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE vendor_id 
> 1
                   GROUP BY vendor_id
                   ORDER BY vendor_name 
ASC
                   LIMIT 500000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x577e00]
/usr/bin/searchd[0x56c601]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x441e2d]
/usr/bin/searchd[0x4420da]
/usr/bin/searchd[0x466d68]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 20): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 12:16:49.748 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT MIN(price) AS min_price, MAX(price) AS max_price, 1 AS one, COUNT(*) AS cnt 
FROM disksIndex WHERE price > 0 GROUP BY one;SELECT disks_rim_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_rim_diametr 
> 0.0
                   GROUP BY disks_rim_diametr
                   ORDER BY 
disks_rim_diametr ASC
                   LIMIT 500000;SELECT disks_type_id, disks_type,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_type_id 
> 1
                   GROUP BY disks_type_id
                   ORDER BY disks_type 
ASC
                   LIMIT 500000;SELECT disks_rim_width, COUNT(*) AS cnt
    
               FROM disksIndex
                   WHERE disks_rim_width > 0.0
  
                 GROUP BY disks_rim_width
                   ORDER BY disks_rim_width 
ASC
                   LIMIT 500000;SELECT disks_port_position, COUNT(*) AS cnt

                   FROM disksIndex
                   WHERE disks_port_position > 
0.0
                   GROUP BY disks_port_position
                   ORDER BY 
disks_port_position ASC
                   LIMIT 500000;SELECT disks_fixture_port_count,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_count 
> 0
                   GROUP BY disks_fixture_port_count
                   ORDER 
BY disks_fixture_port_count ASC
                   LIMIT 500000;SELECT disks_boom,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_boom 
> 0.0
                   GROUP BY disks_boom
                   ORDER BY disks_boom 
ASC
                   LIMIT 500000;SELECT disks_fixture_port_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_diametr 
> 0.0
                   GROUP BY disks_fixture_port_diametr
                   
ORDER BY disks_fixture_port_diametr ASC
                   LIMIT 500000;SELECT disks_color_translit,
 disks_color, COUNT(*) AS cnt FROM disksIndex GROUP BY disks_color
              
   ORDER BY disks_color ASC
                 LIMIT 500000;SELECT vendor_id, vendor_name,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE vendor_id 
> 1
                   GROUP BY vendor_id
                   ORDER BY vendor_name 
ASC
                   LIMIT 500000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x577e00]
/usr/bin/searchd[0x56c601]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x441e2d]
/usr/bin/searchd[0x4420da]
/usr/bin/searchd[0x466d68]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 20): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 12:16:55.240 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT MIN(price) AS min_price, MAX(price) AS max_price, 1 AS one, COUNT(*) AS cnt 
FROM disksIndex WHERE price > 0 GROUP BY one;SELECT disks_rim_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_rim_diametr 
> 0.0
                   GROUP BY disks_rim_diametr
                   ORDER BY 
disks_rim_diametr ASC
                   LIMIT 500000;SELECT disks_type_id, disks_type,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_type_id 
> 1
                   GROUP BY disks_type_id
                   ORDER BY disks_type 
ASC
                   LIMIT 500000;SELECT disks_rim_width, COUNT(*) AS cnt
    
               FROM disksIndex
                   WHERE disks_rim_width > 0.0
  
                 GROUP BY disks_rim_width
                   ORDER BY disks_rim_width 
ASC
                   LIMIT 500000;SELECT disks_port_position, COUNT(*) AS cnt

                   FROM disksIndex
                   WHERE disks_port_position > 
0.0
                   GROUP BY disks_port_position
                   ORDER BY 
disks_port_position ASC
                   LIMIT 500000;SELECT disks_fixture_port_count,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_count 
> 0
                   GROUP BY disks_fixture_port_count
                   ORDER 
BY disks_fixture_port_count ASC
                   LIMIT 500000;SELECT disks_boom,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_boom 
> 0.0
                   GROUP BY disks_boom
                   ORDER BY disks_boom 
ASC
                   LIMIT 500000;SELECT disks_fixture_port_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_diametr 
> 0.0
                   GROUP BY disks_fixture_port_diametr
                   
ORDER BY disks_fixture_port_diametr ASC
                   LIMIT 500000;SELECT disks_color_translit,
 disks_color, COUNT(*) AS cnt FROM disksIndex GROUP BY disks_color
              
   ORDER BY disks_color ASC
                 LIMIT 500000;SELECT vendor_id, vendor_name,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE vendor_id 
> 1
                   GROUP BY vendor_id
                   ORDER BY vendor_name 
ASC
                   LIMIT 500000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x577e00]
/usr/bin/searchd[0x56c601]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x441e2d]
/usr/bin/searchd[0x4420da]
/usr/bin/searchd[0x466d68]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 20): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 12:28:31.610 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT MIN(price) AS min_price, MAX(price) AS max_price, 1 AS one, COUNT(*) AS cnt 
FROM disksIndex WHERE price > 0 GROUP BY one;SELECT disks_rim_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_rim_diametr 
> 0.0
                   GROUP BY disks_rim_diametr
                   ORDER BY 
disks_rim_diametr ASC
                   LIMIT 500000;SELECT disks_type_id, disks_type,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_type_id 
> 1
                   GROUP BY disks_type_id
                   ORDER BY disks_type 
ASC
                   LIMIT 500000;SELECT disks_rim_width, COUNT(*) AS cnt
    
               FROM disksIndex
                   WHERE disks_rim_width > 0.0
  
                 GROUP BY disks_rim_width
                   ORDER BY disks_rim_width 
ASC
                   LIMIT 500000;SELECT disks_port_position, COUNT(*) AS cnt

                   FROM disksIndex
                   WHERE disks_port_position > 
0.0
                   GROUP BY disks_port_position
                   ORDER BY 
disks_port_position ASC
                   LIMIT 500000;SELECT disks_fixture_port_count,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_count 
> 0
                   GROUP BY disks_fixture_port_count
                   ORDER 
BY disks_fixture_port_count ASC
                   LIMIT 500000;SELECT disks_boom,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE disks_boom 
> 0.0
                   GROUP BY disks_boom
                   ORDER BY disks_boom 
ASC
                   LIMIT 500000;SELECT disks_fixture_port_diametr, COUNT(*) AS 
cnt
                   FROM disksIndex
                   WHERE disks_fixture_port_diametr 
> 0.0
                   GROUP BY disks_fixture_port_diametr
                   
ORDER BY disks_fixture_port_diametr ASC
                   LIMIT 500000;SELECT disks_color_translit,
 disks_color, COUNT(*) AS cnt FROM disksIndex GROUP BY disks_color
              
   ORDER BY disks_color ASC
                 LIMIT 500000;SELECT vendor_id, vendor_name,
 COUNT(*) AS cnt
                   FROM disksIndex
                   WHERE vendor_id 
> 1
                   GROUP BY vendor_id
                   ORDER BY vendor_name 
ASC
                   LIMIT 500000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x577e00]
/usr/bin/searchd[0x56c601]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x441e2d]
/usr/bin/searchd[0x4420da]
/usr/bin/searchd[0x466d68]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 20): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 12:32:56.478 2014] [18726]

--- crashed SphinxAPI request dump ---
AAABHQAAB9AAAAAAAAAACQAAAAAAAAAAAAAD6AAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApkaXNrc0luZGV4
AAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAmMxAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAEAAAAAWMA
AAPoAAAAC0Bncm91cCBkZXNjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AFNNSU4ocHJpY2UpIEFTIG1pbl9wcmljZSwgTUFYKHByaWNlKSBBUyBtYXhfcHJpY2UsIDEgQVMgYywg
SUYocHJpY2UgPiAwLCAxLCAwKSBBUyBjMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAG
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKZGlza3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAQAAAARZGlza3NfcmltX2RpYW1ldHIAAAPoAAAAFWRpc2tzX3JpbV9kaWFtZXRyIEFTQwAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbZGlza3NfcmltX2RpYW1ldHIsIENPVU5U
KCopAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD6AAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AApkaXNrc0luZGV4AAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAA1kaXNrc190eXBlX2lkAAAD
6AAAAA5kaXNrc190eXBlIEFTQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAjZGlza3NfdHlwZV9pZCwgZGlza3NfdHlwZSwgQ09VTlQoKikAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAPoAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmRpc2tzSW5kZXgAAAABAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAEAAAAD2Rpc2tzX3JpbV93aWR0aAAAA+gAAAATZGlza3NfcmltX3dpZHRoIEFT
QwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZZGlza3NfcmltX3dpZHRo
LCBDT1VOVCgqKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAGAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAKZGlza3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAATZGlza3NfcG9y
dF9wb3NpdGlvbgAAA+gAAAAXZGlza3NfcG9ydF9wb3NpdGlvbiBBU0MAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHWRpc2tzX3BvcnRfcG9zaXRpb24sIENPVU5UKCopAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAD6AAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApkaXNrc0luZGV4
AAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABhkaXNrc19maXh0dXJlX3BvcnRfY291bnQA
AAPoAAAAHGRpc2tzX2ZpeHR1cmVfcG9ydF9jb3VudCBBU0MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAImRpc2tzX2ZpeHR1cmVfcG9ydF9jb3VudCwgQ09VTlQoKikAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAPoAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmRpc2tzSW5kZXgA
AAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACmRpc2tzX2Jvb20AAAPoAAAADmRpc2tzX2Jv
b20gQVNDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRkaXNrc19ib29t
LCBDT1VOVCgqKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAGAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAKZGlza3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAUZGlza3NfY29sb3Jf
dHJhbnNsaXQAAAPoAAAAD2Rpc2tzX2NvbG9yIEFTQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAArZGlza3NfY29sb3JfdHJhbnNsaXQsIGRpc2tzX2NvbG9yLCBDT1VOVCgq
KQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKZGlz
a3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAJdmVuZG9yX2lkAAAD6AAAAA92ZW5k
b3JfbmFtZSBBU0MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIHZl
bmRvcl9pZCwgdmVuZG9yX25hbWUsIENPVU5UKCopAAAAAAAAAAAAAAAAAAAAAA==
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x562368]
/usr/bin/searchd[0x57aea0]
/usr/bin/searchd[0x5cb1b2]
/usr/bin/searchd[0x5cbeb6]
/usr/bin/searchd[0x5cbf2e]
/usr/bin/searchd[0x5cc335]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x442278]
/usr/bin/searchd[0x445720]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 22): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 12:32:56.443 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 12:33:06.746 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 12:34:15.730 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 13:09:29.089 2014] [18726]

--- crashed SphinxAPI request dump ---
AAABHQAAB9AAAAAAAAAACQAAAAAAAAAAAAAD6AAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApkaXNrc0luZGV4
AAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAmMxAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAEAAAAAWMA
AAPoAAAAC0Bncm91cCBkZXNjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AFNNSU4ocHJpY2UpIEFTIG1pbl9wcmljZSwgTUFYKHByaWNlKSBBUyBtYXhfcHJpY2UsIDEgQVMgYywg
SUYocHJpY2UgPiAwLCAxLCAwKSBBUyBjMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAG
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKZGlza3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAQAAAARZGlza3NfcmltX2RpYW1ldHIAAAPoAAAAFWRpc2tzX3JpbV9kaWFtZXRyIEFTQwAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbZGlza3NfcmltX2RpYW1ldHIsIENPVU5U
KCopAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD6AAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AApkaXNrc0luZGV4AAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAA1kaXNrc190eXBlX2lkAAAD
6AAAAA5kaXNrc190eXBlIEFTQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAjZGlza3NfdHlwZV9pZCwgZGlza3NfdHlwZSwgQ09VTlQoKikAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAPoAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmRpc2tzSW5kZXgAAAABAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAEAAAAD2Rpc2tzX3JpbV93aWR0aAAAA+gAAAATZGlza3NfcmltX3dpZHRoIEFT
QwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZZGlza3NfcmltX3dpZHRo
LCBDT1VOVCgqKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAGAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAKZGlza3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAATZGlza3NfcG9y
dF9wb3NpdGlvbgAAA+gAAAAXZGlza3NfcG9ydF9wb3NpdGlvbiBBU0MAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHWRpc2tzX3BvcnRfcG9zaXRpb24sIENPVU5UKCopAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAD6AAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApkaXNrc0luZGV4
AAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABhkaXNrc19maXh0dXJlX3BvcnRfY291bnQA
AAPoAAAAHGRpc2tzX2ZpeHR1cmVfcG9ydF9jb3VudCBBU0MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAImRpc2tzX2ZpeHR1cmVfcG9ydF9jb3VudCwgQ09VTlQoKikAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAPoAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmRpc2tzSW5kZXgA
AAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACmRpc2tzX2Jvb20AAAPoAAAADmRpc2tzX2Jv
b20gQVNDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRkaXNrc19ib29t
LCBDT1VOVCgqKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAGAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAKZGlza3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAUZGlza3NfY29sb3Jf
dHJhbnNsaXQAAAPoAAAAD2Rpc2tzX2NvbG9yIEFTQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAArZGlza3NfY29sb3JfdHJhbnNsaXQsIGRpc2tzX2NvbG9yLCBDT1VOVCgq
KQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKZGlz
a3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAJdmVuZG9yX2lkAAAD6AAAAA92ZW5k
b3JfbmFtZSBBU0MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIHZl
bmRvcl9pZCwgdmVuZG9yX25hbWUsIENPVU5UKCopAAAAAAAAAAAAAAAAAAAAAA==
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x562368]
/usr/bin/searchd[0x57aea0]
/usr/bin/searchd[0x5cb1b2]
/usr/bin/searchd[0x5cbeb6]
/usr/bin/searchd[0x5cbf2e]
/usr/bin/searchd[0x5cc335]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x442278]
/usr/bin/searchd[0x445720]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 22): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 13:09:28.624 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 14:08:29.229 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 15:37:42.252 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 16:16:08.247 2014] [18726]

--- crashed SphinxAPI request dump ---
AAABHQAAB9AAAAAAAAAACQAAAAAAAAAAAAAD6AAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApkaXNrc0luZGV4
AAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAmMxAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAEAAAAAWMA
AAPoAAAAC0Bncm91cCBkZXNjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AFNNSU4ocHJpY2UpIEFTIG1pbl9wcmljZSwgTUFYKHByaWNlKSBBUyBtYXhfcHJpY2UsIDEgQVMgYywg
SUYocHJpY2UgPiAwLCAxLCAwKSBBUyBjMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAG
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKZGlza3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAQAAAARZGlza3NfcmltX2RpYW1ldHIAAAPoAAAAFWRpc2tzX3JpbV9kaWFtZXRyIEFTQwAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbZGlza3NfcmltX2RpYW1ldHIsIENPVU5U
KCopAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD6AAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AApkaXNrc0luZGV4AAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAA1kaXNrc190eXBlX2lkAAAD
6AAAAA5kaXNrc190eXBlIEFTQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAjZGlza3NfdHlwZV9pZCwgZGlza3NfdHlwZSwgQ09VTlQoKikAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAPoAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmRpc2tzSW5kZXgAAAABAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAEAAAAD2Rpc2tzX3JpbV93aWR0aAAAA+gAAAATZGlza3NfcmltX3dpZHRoIEFT
QwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZZGlza3NfcmltX3dpZHRo
LCBDT1VOVCgqKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAGAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAKZGlza3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAATZGlza3NfcG9y
dF9wb3NpdGlvbgAAA+gAAAAXZGlza3NfcG9ydF9wb3NpdGlvbiBBU0MAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHWRpc2tzX3BvcnRfcG9zaXRpb24sIENPVU5UKCopAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAD6AAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApkaXNrc0luZGV4
AAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABhkaXNrc19maXh0dXJlX3BvcnRfY291bnQA
AAPoAAAAHGRpc2tzX2ZpeHR1cmVfcG9ydF9jb3VudCBBU0MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAImRpc2tzX2ZpeHR1cmVfcG9ydF9jb3VudCwgQ09VTlQoKikAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAPoAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmRpc2tzSW5kZXgA
AAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACmRpc2tzX2Jvb20AAAPoAAAADmRpc2tzX2Jv
b20gQVNDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRkaXNrc19ib29t
LCBDT1VOVCgqKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAGAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAKZGlza3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAUZGlza3NfY29sb3Jf
dHJhbnNsaXQAAAPoAAAAD2Rpc2tzX2NvbG9yIEFTQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAArZGlza3NfY29sb3JfdHJhbnNsaXQsIGRpc2tzX2NvbG9yLCBDT1VOVCgq
KQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKZGlz
a3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAJdmVuZG9yX2lkAAAD6AAAAA92ZW5k
b3JfbmFtZSBBU0MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIHZl
bmRvcl9pZCwgdmVuZG9yX25hbWUsIENPVU5UKCopAAAAAAAAAAAAAAAAAAAAAA==
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x562368]
/usr/bin/searchd[0x57aea0]
/usr/bin/searchd[0x5cb1b2]
/usr/bin/searchd[0x5cbeb6]
/usr/bin/searchd[0x5cbf2e]
/usr/bin/searchd[0x5cc335]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x442278]
/usr/bin/searchd[0x445720]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 22): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 16:16:07.983 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 16:16:50.025 2014] [18726]

--- crashed SphinxAPI request dump ---
AAABHQAAB9AAAAAAAAAACQAAAAAAAAAAAAAD6AAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApkaXNrc0luZGV4
AAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAmMxAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAEAAAAAWMA
AAPoAAAAC0Bncm91cCBkZXNjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AFNNSU4ocHJpY2UpIEFTIG1pbl9wcmljZSwgTUFYKHByaWNlKSBBUyBtYXhfcHJpY2UsIDEgQVMgYywg
SUYocHJpY2UgPiAwLCAxLCAwKSBBUyBjMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAG
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKZGlza3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAQAAAARZGlza3NfcmltX2RpYW1ldHIAAAPoAAAAFWRpc2tzX3JpbV9kaWFtZXRyIEFTQwAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbZGlza3NfcmltX2RpYW1ldHIsIENPVU5U
KCopAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD6AAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AApkaXNrc0luZGV4AAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAA1kaXNrc190eXBlX2lkAAAD
6AAAAA5kaXNrc190eXBlIEFTQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAjZGlza3NfdHlwZV9pZCwgZGlza3NfdHlwZSwgQ09VTlQoKikAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAPoAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmRpc2tzSW5kZXgAAAABAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAEAAAAD2Rpc2tzX3JpbV93aWR0aAAAA+gAAAATZGlza3NfcmltX3dpZHRoIEFT
QwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZZGlza3NfcmltX3dpZHRo
LCBDT1VOVCgqKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAGAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAKZGlza3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAATZGlza3NfcG9y
dF9wb3NpdGlvbgAAA+gAAAAXZGlza3NfcG9ydF9wb3NpdGlvbiBBU0MAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHWRpc2tzX3BvcnRfcG9zaXRpb24sIENPVU5UKCopAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAD6AAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApkaXNrc0luZGV4
AAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABhkaXNrc19maXh0dXJlX3BvcnRfY291bnQA
AAPoAAAAHGRpc2tzX2ZpeHR1cmVfcG9ydF9jb3VudCBBU0MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAImRpc2tzX2ZpeHR1cmVfcG9ydF9jb3VudCwgQ09VTlQoKikAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAPoAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmRpc2tzSW5kZXgA
AAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACmRpc2tzX2Jvb20AAAPoAAAADmRpc2tzX2Jv
b20gQVNDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRkaXNrc19ib29t
LCBDT1VOVCgqKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAGAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAKZGlza3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAUZGlza3NfY29sb3Jf
dHJhbnNsaXQAAAPoAAAAD2Rpc2tzX2NvbG9yIEFTQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAArZGlza3NfY29sb3JfdHJhbnNsaXQsIGRpc2tzX2NvbG9yLCBDT1VOVCgq
KQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKZGlz
a3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAJdmVuZG9yX2lkAAAD6AAAAA92ZW5k
b3JfbmFtZSBBU0MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIHZl
bmRvcl9pZCwgdmVuZG9yX25hbWUsIENPVU5UKCopAAAAAAAAAAAAAAAAAAAAAA==
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x562368]
/usr/bin/searchd[0x57aea0]
/usr/bin/searchd[0x5cb1b2]
/usr/bin/searchd[0x5cbeb6]
/usr/bin/searchd[0x5cbf2e]
/usr/bin/searchd[0x5cc335]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x442278]
/usr/bin/searchd[0x445720]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 22): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 16:16:49.497 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 16:18:51.186 2014] [18726]

--- crashed SphinxAPI request dump ---
AAABHQAAB9AAAAAAAAAACQAAAAAAAAAAAAAD6AAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApkaXNrc0luZGV4
AAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAmMxAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAEAAAAAWMA
AAPoAAAAC0Bncm91cCBkZXNjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AFNNSU4ocHJpY2UpIEFTIG1pbl9wcmljZSwgTUFYKHByaWNlKSBBUyBtYXhfcHJpY2UsIDEgQVMgYywg
SUYocHJpY2UgPiAwLCAxLCAwKSBBUyBjMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAG
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKZGlza3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAQAAAARZGlza3NfcmltX2RpYW1ldHIAAAPoAAAAFWRpc2tzX3JpbV9kaWFtZXRyIEFTQwAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbZGlza3NfcmltX2RpYW1ldHIsIENPVU5U
KCopAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD6AAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AApkaXNrc0luZGV4AAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAA1kaXNrc190eXBlX2lkAAAD
6AAAAA5kaXNrc190eXBlIEFTQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAjZGlza3NfdHlwZV9pZCwgZGlza3NfdHlwZSwgQ09VTlQoKikAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAPoAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmRpc2tzSW5kZXgAAAABAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAEAAAAD2Rpc2tzX3JpbV93aWR0aAAAA+gAAAATZGlza3NfcmltX3dpZHRoIEFT
QwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZZGlza3NfcmltX3dpZHRo
LCBDT1VOVCgqKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAGAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAKZGlza3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAATZGlza3NfcG9y
dF9wb3NpdGlvbgAAA+gAAAAXZGlza3NfcG9ydF9wb3NpdGlvbiBBU0MAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHWRpc2tzX3BvcnRfcG9zaXRpb24sIENPVU5UKCopAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAD6AAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApkaXNrc0luZGV4
AAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABhkaXNrc19maXh0dXJlX3BvcnRfY291bnQA
AAPoAAAAHGRpc2tzX2ZpeHR1cmVfcG9ydF9jb3VudCBBU0MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAImRpc2tzX2ZpeHR1cmVfcG9ydF9jb3VudCwgQ09VTlQoKikAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAPoAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmRpc2tzSW5kZXgA
AAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACmRpc2tzX2Jvb20AAAPoAAAADmRpc2tzX2Jv
b20gQVNDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRkaXNrc19ib29t
LCBDT1VOVCgqKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAGAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAKZGlza3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAUZGlza3NfY29sb3Jf
dHJhbnNsaXQAAAPoAAAAD2Rpc2tzX2NvbG9yIEFTQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAArZGlza3NfY29sb3JfdHJhbnNsaXQsIGRpc2tzX2NvbG9yLCBDT1VOVCgq
KQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKZGlz
a3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAJdmVuZG9yX2lkAAAD6AAAAA92ZW5k
b3JfbmFtZSBBU0MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIHZl
bmRvcl9pZCwgdmVuZG9yX25hbWUsIENPVU5UKCopAAAAAAAAAAAAAAAAAAAAAA==
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x562368]
/usr/bin/searchd[0x57aea0]
/usr/bin/searchd[0x5cb1b2]
/usr/bin/searchd[0x5cbeb6]
/usr/bin/searchd[0x5cbf2e]
/usr/bin/searchd[0x5cc335]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x442278]
/usr/bin/searchd[0x445720]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 22): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 16:18:50.334 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
[Tue May  6 16:36:31.026 2014] [18726] caught SIGHUP (seamless=1, in queue=1)
[Tue May  6 16:36:31.047 2014] [ 6463] WARNING: id32 index loaded by id64 binary; attributes converted
[Tue May  6 16:36:38.001 2014] [18726] rotating index 'disksIndex': success
[Tue May  6 16:36:38.070 2014] [18726] rotating finished
------- FATAL: CRASH DUMP -------
[Tue May  6 17:43:37.452 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex` 

GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:44:05.957 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:44:07.484 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:44:08.967 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:44:10.018 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:44:10.085 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:44:11.021 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:44:11.964 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:44:12.914 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:44:51.966 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:44:53.707 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:44:54.061 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:44:55.011 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:44:59.979 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:45:02.011 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:45:03.159 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:45:03.264 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:45:04.213 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:45:05.050 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:45:05.996 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:45:06.934 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:45:07.821 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:45:08.617 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:45:09.398 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:45:10.143 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:45:10.864 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:45:11.633 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:45:12.426 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:45:13.180 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price FROM `disksIndex` 
 GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:45:29.983 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:45:50.119 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:45:52.686 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:45:53.874 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:45:53.994 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:45:54.824 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:45:55.691 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:45:56.527 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:47:20.317 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:47:26.337 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:47:26.716 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:47:27.729 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:47:28.628 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:47:29.397 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:47:30.085 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:48:24.911 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:48:26.853 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:48:28.221 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:48:28.333 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:48:29.315 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:48:30.077 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
[Tue May  6 17:48:44.557 2014] [18726] caught SIGHUP (seamless=1, in queue=1)
[Tue May  6 17:48:44.584 2014] [ 7281] WARNING: id32 index loaded by id64 binary; attributes converted
[Tue May  6 17:48:51.564 2014] [18726] rotating index 'disksIndex': success
[Tue May  6 17:48:51.591 2014] [18726] rotating finished
------- FATAL: CRASH DUMP -------
[Tue May  6 17:49:10.607 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex LIMIT 10
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:54:07.688 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:56:33.311 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex LIMIT 1
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:56:36.027 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex LIMIT 1
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:56:37.104 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex LIMIT 1
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:56:37.244 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex LIMIT 1
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:56:38.184 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex LIMIT 1
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:56:38.996 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex LIMIT 1
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 17:56:39.698 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT * FROM disksIndex LIMIT 1
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 21:04:52.685 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 21:48:07.071 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 21:48:12.801 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 21:48:16.422 2014] [18726]

--- crashed SphinxAPI request dump ---
AAABHQAAB9AAAAAAAAAACQAAAAAAAAAAAAAD6AAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApkaXNrc0luZGV4
AAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAmMxAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAEAAAAAWMA
AAPoAAAAC0Bncm91cCBkZXNjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AFNNSU4ocHJpY2UpIEFTIG1pbl9wcmljZSwgTUFYKHByaWNlKSBBUyBtYXhfcHJpY2UsIDEgQVMgYywg
SUYocHJpY2UgPiAwLCAxLCAwKSBBUyBjMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAG
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKZGlza3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAQAAAARZGlza3NfcmltX2RpYW1ldHIAAAPoAAAAFWRpc2tzX3JpbV9kaWFtZXRyIEFTQwAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbZGlza3NfcmltX2RpYW1ldHIsIENPVU5U
KCopAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD6AAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AApkaXNrc0luZGV4AAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAA1kaXNrc190eXBlX2lkAAAD
6AAAAA5kaXNrc190eXBlIEFTQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAjZGlza3NfdHlwZV9pZCwgZGlza3NfdHlwZSwgQ09VTlQoKikAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAPoAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmRpc2tzSW5kZXgAAAABAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAEAAAAD2Rpc2tzX3JpbV93aWR0aAAAA+gAAAATZGlza3NfcmltX3dpZHRoIEFT
QwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZZGlza3NfcmltX3dpZHRo
LCBDT1VOVCgqKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAGAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAKZGlza3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAATZGlza3NfcG9y
dF9wb3NpdGlvbgAAA+gAAAAXZGlza3NfcG9ydF9wb3NpdGlvbiBBU0MAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHWRpc2tzX3BvcnRfcG9zaXRpb24sIENPVU5UKCopAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAD6AAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApkaXNrc0luZGV4
AAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABhkaXNrc19maXh0dXJlX3BvcnRfY291bnQA
AAPoAAAAHGRpc2tzX2ZpeHR1cmVfcG9ydF9jb3VudCBBU0MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAImRpc2tzX2ZpeHR1cmVfcG9ydF9jb3VudCwgQ09VTlQoKikAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAPoAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmRpc2tzSW5kZXgA
AAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACmRpc2tzX2Jvb20AAAPoAAAADmRpc2tzX2Jv
b20gQVNDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRkaXNrc19ib29t
LCBDT1VOVCgqKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAGAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAKZGlza3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAUZGlza3NfY29sb3Jf
dHJhbnNsaXQAAAPoAAAAD2Rpc2tzX2NvbG9yIEFTQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAArZGlza3NfY29sb3JfdHJhbnNsaXQsIGRpc2tzX2NvbG9yLCBDT1VOVCgq
KQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKZGlz
a3NJbmRleAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAJdmVuZG9yX2lkAAAD6AAAAA92ZW5k
b3JfbmFtZSBBU0MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIHZl
bmRvcl9pZCwgdmVuZG9yX25hbWUsIENPVU5UKCopAAAAAAAAAAAAAAAAAAAAAA==
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x4c87b0]
/usr/bin/searchd[0x562368]
/usr/bin/searchd[0x57aea0]
/usr/bin/searchd[0x5cb1b2]
/usr/bin/searchd[0x5cbeb6]
/usr/bin/searchd[0x5cbf2e]
/usr/bin/searchd[0x5cc335]
/usr/bin/searchd[0x48e47d]
/usr/bin/searchd[0x4b0620]
/usr/bin/searchd[0x4339c0]
/usr/bin/searchd[0x440df4]
/usr/bin/searchd[0x441938]
/usr/bin/searchd[0x442278]
/usr/bin/searchd[0x445720]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 22): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Tue May  6 21:48:16.026 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 5000000
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
------- FATAL: CRASH DUMP -------
[Wed May  7 07:37:42.930 2014] [18726]

--- crashed SphinxQL request dump ---
SELECT `disks_display_id`, `disks_display_name`, `disks_type`, `disks_display_translit`,
 `disks_rating`, `image_name`, MIN(min_display_price_fixture) AS min_price
FROM `disksIndex`

GROUP BY `disks_display_id` LIMIT 20
--- request dump end ---
Sphinx 2.1.7-id64-release (rel21-r4638)
Handling signal 11
-------------- backtrace begins here ---------------
Program compiled with x86_64-linux-gnu-gcc 4.7
Configured with flags:  '--host=x86_64-linux-gnu' '--build=x86_64-linux-gnu' '--prefix=/usr' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--localstatedir=/var/lib/sphinxsearch' '--sysconfdir=/etc/sphinxsearch' '--with-mysql' '--with-pgsql' '--enable-id64' '--with-libstemmer' '--with-re2' '--with-syslog' 'CFLAGS=-Wall -g -O3' 'LDFLAGS=-Wl,-z,defs' 'build_alias=x86_64-linux-gnu' 'host_alias=x86_64-linux-gnu'
Host OS is Linux debian764 3.2.0-4-amd64 #1 SMP Debian 3.2.51-1 x86_64 GNU/Linux
Stack bottom = 0x7ffff4d3f54f, thread stack size = 0x10000
Trying manual backtrace:
Something wrong with thread stack, manual backtrace may be incorrect (fp=0xb)
Wrong stack limit or frame pointer, manual backtrace failed (fp=0xb, stack=0x7ffff4d40000, stacksize=0x10000)
Trying system backtrace:
begin of system symbols:
/usr/bin/searchd[0x557fa0]
/usr/bin/searchd[0x40b438]
/lib/x86_64-linux-gnu/libpthread.so.0(+0xf030)[0x7f115677e030]
/usr/bin/searchd[0x41a5b5]
/usr/bin/searchd[0x46701a]
/usr/bin/searchd[0x443a56]
/usr/bin/searchd[0x445c0c]
/usr/bin/searchd[0x446bab]
/usr/bin/searchd[0x4072c2]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x7f11551e8ead]
/usr/bin/searchd[0x407d5d]
-------------- backtrace ends here ---------------
Backtrace looks OK. Now you have to do following steps:
  1. Run the command over the crashed binary (for example, 'searchd'):
     nm -n searchd > searchd.sym
  2. Attach the binary, generated .sym and the text of backtrace (see above) to the bug report.
Also you can read the section about resolving backtraces in the documentation.
--- BT to source lines (depth 11): ---
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
??:0
--- BT to source lines finished ---
------- CRASH DUMP END -------
[Wed May  7 09:16:09.707 2014] [18726] caught SIGTERM, shutting down
[Wed May  7 09:16:09.763 2014] [18726] shutdown complete
[Wed May  7 09:16:37.215 2014] [ 3645] listening on all interfaces, port=9306
[Wed May  7 09:16:37.215 2014] [ 3645] listening on all interfaces, port=9312
[Wed May  7 09:16:38.770 2014] [ 3646] accepting connections
[Fri May 16 00:55:08.966 2014] [ 3646] caught SIGTERM, shutting down
[Fri May 16 00:55:09.202 2014] [ 3646] shutdown complete
[Fri May 16 00:55:39.810 2014] [ 3656] listening on all interfaces, port=9306
[Fri May 16 00:55:39.810 2014] [ 3656] listening on all interfaces, port=9312
[Fri May 16 00:55:41.568 2014] [ 3657] accepting connections
[Tue May 20 22:37:31.989 2014] [ 3657] caught SIGTERM, shutting down
[Tue May 20 22:37:32.201 2014] [ 3657] shutdown complete
[Tue May 20 22:38:00.537 2014] [ 3755] listening on all interfaces, port=9306
[Tue May 20 22:38:00.537 2014] [ 3755] listening on all interfaces, port=9312
[Tue May 20 22:38:02.305 2014] [ 3825] accepting connections
[Tue May 20 22:48:19.785 2014] [ 3825] caught SIGTERM, shutting down
[Tue May 20 22:48:19.827 2014] [ 3825] shutdown complete
[Tue May 20 22:48:42.565 2014] [ 3780] listening on all interfaces, port=9306
[Tue May 20 22:48:42.565 2014] [ 3780] listening on all interfaces, port=9312
[Tue May 20 22:48:42.608 2014] [ 3782] accepting connections
[Tue May 20 23:57:06.736 2014] [ 3782] caught SIGTERM, shutting down
[Tue May 20 23:57:06.776 2014] [ 3782] shutdown complete
[Tue May 20 23:57:33.656 2014] [ 3787] listening on all interfaces, port=9306
[Tue May 20 23:57:33.656 2014] [ 3787] listening on all interfaces, port=9312
[Tue May 20 23:57:33.690 2014] [ 3789] accepting connections
[Wed May 21 00:00:29.861 2014] [ 3789] caught SIGTERM, shutting down
[Wed May 21 00:00:29.913 2014] [ 3789] shutdown complete
[Wed May 21 00:00:53.954 2014] [ 3318] listening on all interfaces, port=9306
[Wed May 21 00:00:53.954 2014] [ 3318] listening on all interfaces, port=9312
[Wed May 21 00:00:57.394 2014] [ 3782] accepting connections
[Wed May 21 00:04:41.596 2014] [ 3782] caught SIGTERM, shutting down
[Wed May 21 00:04:41.613 2014] [ 3782] shutdown complete
[Wed May 21 00:05:04.480 2014] [ 3741] listening on all interfaces, port=9306
[Wed May 21 00:05:04.480 2014] [ 3741] listening on all interfaces, port=9312
[Wed May 21 00:05:04.533 2014] [ 3749] accepting connections
[Wed May 21 09:38:49.464 2014] [ 3749] caught SIGTERM, shutting down
[Wed May 21 09:38:49.630 2014] [ 3749] shutdown complete
[Wed May 21 09:39:16.952 2014] [ 3195] listening on all interfaces, port=9306
[Wed May 21 09:39:16.952 2014] [ 3195] listening on all interfaces, port=9312
[Wed May 21 09:39:18.240 2014] [ 3780] accepting connections
[Wed May 21 12:07:35.650 2014] [ 3780] caught SIGTERM, shutting down
[Wed May 21 12:07:36.088 2014] [ 3780] shutdown complete
[Wed May 21 12:08:02.424 2014] [ 3377] listening on all interfaces, port=9306
[Wed May 21 12:08:02.424 2014] [ 3377] listening on all interfaces, port=9312
[Wed May 21 12:08:04.266 2014] [ 3896] accepting connections
[Wed May 21 12:19:09.167 2014] [ 3896] caught SIGTERM, shutting down
[Wed May 21 12:19:09.197 2014] [ 3896] shutdown complete
[Wed May 21 12:19:32.450 2014] [ 3780] listening on all interfaces, port=9306
[Wed May 21 12:19:32.450 2014] [ 3780] listening on all interfaces, port=9312
[Wed May 21 12:19:32.490 2014] [ 3781] accepting connections
[Mon May 26 22:03:15.614 2014] [ 3781] caught SIGTERM, shutting down
[Mon May 26 22:03:15.771 2014] [ 3781] shutdown complete
[Mon May 26 22:03:43.827 2014] [ 3802] listening on all interfaces, port=9306
[Mon May 26 22:03:43.827 2014] [ 3802] listening on all interfaces, port=9312
[Mon May 26 22:03:45.301 2014] [ 3803] accepting connections
[Fri Jun 27 10:59:54.725 2014] [ 3803] caught SIGTERM, shutting down
[Fri Jun 27 10:59:55.270 2014] [ 3803] shutdown complete
[Fri Jun 27 11:02:39.076 2014] [ 3091] listening on all interfaces, port=9306
[Fri Jun 27 11:02:39.082 2014] [ 3091] listening on all interfaces, port=9312
[Fri Jun 27 11:02:42.926 2014] [ 3092] accepting connections
